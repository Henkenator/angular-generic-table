!function(e){try{e=angular.module("generic.table")}catch(t){e=angular.module("generic.table",[])}e.run(["$templateCache",function(e){e.put("directive/generic-table/generic-table.html",'<div class="generic-table"><table class="table table-condensed table-hover table-sortable" ng-if="gtHasData"><thead><tr ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><th ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class=":gtRefresh:[field.classNames, (field.objectKey | camelToDash) + \'-column\', \'sort-\'+(gtSettings | getProperty:field.objectKey:\'sort\')]"><span ng-click=":gtRefresh:(gtSettings | getProperty:field.objectKey:\'sort\') === \'enable\' ? sort(field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'asc\' ? sort(field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'desc\' ? sort(field.objectKey):\'\'">{{::field.name}}</span></th></tr><tr ng-if="gtTotals" ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><td ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" class="total-column" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']" ng-bind-html="::gtFields | gtRender:gtTotals:field.objectKey"></td></tr></thead><tbody><tr ng-repeat="row in gtDisplayData | limitTo: displayRows" gt-event="" ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><td ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']"><span ng-class="::field.click ? \'gt-click-enabled\':\'\'" ng-bind-html="::gtFields | gtRender:row:field.objectKey" ng-click="::!field.click || field.click(row)"></span></td></tr></tbody><tr ng-if="pagination === false"><td class="gt-no-data" colspan="{{:gtRefresh:(gtSettings | filter:{\'visible\':true}:true).length}}">{{::gtNoDataTxt}}</td></tr></table><div class="gt-pagination text-center" ng-if="gtPagination === true && pagination !== false"><ul class="pagination"><li ng-class="{disabled: currentPage === 0}" ng-show="currentPage !== 0"><button class="btn-link link" ng-click="previousPage()" translate="ALL.GENERAL#PAGINATION_PREVIOUS#BUTTON" ng-disabled="currentPage === 0">« Prev</button></li><li ng-show="currentPage > 3"><button class="btn-link link" ng-click="setPage(0)">1</button><small>…</small></li><li style="display: inline;padding: 0 5px;" ng-repeat="page in pagination" ng-class="page === currentPage ? \'active\':\'\'"><button class="btn-link link" ng-click="setPage(page)">{{page+1}}</button></li><li ng-show="currentPage +1 < pages.length-1 && pages.length > 4"><small ng-show="currentPage + 3 < pages.length">…</small><button class="btn-link link" ng-click="setPage(pages.length-1)">{{pages.length}}</button></li><li ng-class="{disabled: currentPage == pages.length}" ng-show="currentPage+1 !== pages.length"><button class="btn-link link" ng-click="nextPage()" translate="ALL.GENERAL#PAGINATION_NEXT#BUTTON" ng-disabled="currentPage+1 === pages.length">Next »</button></li></ul></div></div>')}])}(),angular.module("generic.table").directive("genericTable",function(){return{restrict:"E",replace:!0,scope:{gtSettings:"=gtSettings",gtFields:"=gtFields",gtTotals:"=gtTotals",gtData:"=gtData",gtRows:"@gtRows",gtRowTransition:"@gtRowTransition",gtPagination:"@gtPagination",gtNoDataTxt:"@"},templateUrl:"directive/generic-table/generic-table.html",link:function(e,t,n,a){},controller:"genericTableController"}}).controller("genericTableController",["$scope","$filter","$timeout","CSV","$document",function(e,t,n,a,i){var r,o,g,l=[];e.gtPagination="undefined"==typeof e.gtPagination?!0:"false"!==e.gtPagination,e.gtRows="undefined"==typeof e.gtRows?20:e.gtRows,e.gtNoDataTxt="undefined"==typeof e.gtNoDataTxt?"No table data to display":e.gtNoDataTxt,t("map")(e.gtSettings,function(n){try{t("filter")(e.gtFields,{objectKey:n.objectKey},!0)[0].columnOrder=n.columnOrder}catch(a){console.log('field definition object for property: "'+n.objectKey+'" not found.',a)}});var s=function(t){e.gtHasData=!1,r=t.slice(0),e.$emit("gt-started-data-processing"),d(t)},c=function(t){e.gtHasData=!1,r=t.slice(0),e.$emit("gt-started-data-processing"),d(t)},d=function(e){var t=e;u(t),t.length=0},u=function(n){var a=t("map")(t("filter")(e.gtSettings,{enabled:!0},!0),"objectKey");o=t("map")(n,function(n){var i={};return t("map")(a,function(a){if("undefined"!=typeof n[a])i[a]=n[a];else{var r=t("map")(t("filter")(e.gtFields,{objectKey:a},!0),"value")[0];r&&angular.isFunction(r)?i[a]=r(n):console.log('property: "'+a+'" does not exists in data object and no value function was declared')}}),i}),f()},f=function(){g=t("gtSort")(o,l),e.$broadcast("$$rebind::gtRefresh"),p()},p=function(){e.pages=t("chunkBy")(g,parseInt(e.gtRows)),e.currentPage=0,e.loading=!0,e.$emit("gt-started-rendering"),e.gtDisplayData=e.pages[e.currentPage],b(e.pages.length,e.currentPage),n(function(){e.$emit("gt-finished-data-processing"),e.gtHasData=!0},200)};e.$on("gt-update-table",function(e,t){c(t)}),e.$on("gt-update-structure",function(t,n){e.gtFields=n.fields,e.gtSettings=n.settings}),e.$on("gt-paginate-table",function(t,n){e.gtRows=parseInt(n),p()}),e.$on("gt-export-csv",function(e,t){y(t)});var b=function(t,n){return e.pagination=[],0===t?void(e.pagination=!1):void(2>t?e.pagination=[0]:3>t?e.pagination=[0,1]:4>t?e.pagination=[0,1,2]:5>t?e.pagination=[0,1,2,3]:4>n?e.pagination=[0,1,2,3,4]:t>n+1?e.pagination=[n-1,n,n+1]:t===n+1?e.pagination=[n-2,n-1,n]:t-4>n&&(e.pagination=[n-1,n,n+1,n+2]))};e.nextPage=function(){try{e.currentPage++,b(e.pages.length,e.currentPage),e.$emit("gt-started-rendering"),e.gtDisplayData=e.pages[e.currentPage]}catch(t){console.log(t)}},e.previousPage=function(){e.currentPage--,b(e.pages.length,e.currentPage),e.$emit("gt-started-rendering"),e.gtDisplayData=e.pages[e.currentPage]},e.setPage=function(t){e.currentPage=t,b(e.pages.length,e.currentPage),e.$emit("gt-started-rendering"),e.gtDisplayData=e.pages[e.currentPage]},e.sort=function(n){if(n)for(var a=0;e.gtSettings.length>a;a++){var i=e.gtSettings[a];if(i.objectKey===n){var r=i.sort;switch(r){case"disable":break;case"enable":e.gtSettings[a].sort="asc";break;case"asc":e.gtSettings[a].sort="desc";break;case"desc":e.gtSettings[a].sort="enable"}}}l=t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){return("desc"===e.sort?"-":"")+e.objectKey}),f()},e.gtData&&s(e.gtData);var y=function(r){r="undefined"==typeof r?{}:r;var o="undefined"==typeof r.fileName?"export":r.fileName,l=JSON.parse(angular.toJson(g.slice(0))),s={fieldSep:"undefined"==typeof r.fieldSep?";":r.fieldSep,header:t("map")(t("orderBy")(e.gtFields,"columnOrder"),"name"),txtDelim:"undefined"==typeof r.txtDelim?'"':r.txtDelim,columnOrder:t("map")(t("orderBy")(e.gtFields,"columnOrder"),"objectKey"),decimalSep:"undefined"==typeof r.decimalSep?",":r.decimalSep,addByteOrderMarker:"undefined"==typeof r.addBom,charset:"undefined"==typeof r.charset?"utf-8":r.charset};a.stringify(l,s).then(function(e){var t;if(window.navigator.msSaveOrOpenBlob)t=new Blob([e],{type:"text/csv;charset=utf-8;"}),navigator.msSaveBlob(t,"export.csv");else if("Microsoft Internet Explorer"===window.navigator.appName){window.alert("You're using an old version of Internet Explorer and the export might therefore have the wrong format, please update your browser.");var a=angular.element("<iframe></iframe>");a[0].style.display="none";var r=angular.element("body");r.append(a);var g=null;a[0].contentDocument?g=a[0].contentDocument:a[0].contentWindow&&(g=a[0].contentWindow.document),g.open("text/plain","replace"),g.write([e]),g.close(),g.execCommand("SaveAs",!0,o+".csv")}else{t=new Blob([e],{type:"text/csv;charset=utf-8;"});var l=angular.element("<a></a>");l.attr("href",window.URL.createObjectURL(t)),l.attr("download",o+".csv"),i.find("body").append(l),n(function(){l[0].click(),l.remove()},null)}})}}]).directive("gtEvent",function(){return{restrict:"A",link:function(e,t,n,a){e.$last&&e.$emit("gt-finished-rendering")}}}).filter("getProperty",["$filter",function(e){return function(t,n,a){try{var i=e("filter")(t,{objectKey:n},!0)[0][a]}catch(r){console.log('cannot read property: "'+a+'" on missing key: "'+n+'" in settings.',r)}return i}}]).filter("gtRender",["$filter",function(e){return function(t,n,a){var i;if(angular.isArray(t)){var r=e("filter")(t,{objectKey:a},!0)[0].render;i=r&&angular.isFunction(r)?r(n,a):n[a]}else i=n[a];return i}}]).filter("camelToDash",function(){return function(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}}).filter("gtSort",function(){return function(e,t){function n(e){var t=1;return"-"===e[0]&&(t=-1,e=e.substr(1)),function(n,a){var i=n[e]<a[e]?-1:n[e]>a[e]?1:0;return i*t}}function a(e){var t=e;return function(e,a){for(var i=0,r=0,o=t.length;0===r&&o>i;)r=n(t[i])(e,a),i++;return r}}return e.sort(a(t))}});
//# sourceMappingURL=data:application/json;base64,
