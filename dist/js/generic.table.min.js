!function(e){try{e=angular.module("generic.table")}catch(t){e=angular.module("generic.table",[])}e.run(["$templateCache",function(e){e.put("directive/generic-table/generic-table.html",'<div class="generic-table"><div class="gt-wrapper"><table class="table table-sortable" ng-if="gtHasData" ng-class=":gtRefresh:gtClasses"><thead><tr ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><th ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class=":gtRefresh:[field.classNames, (field.objectKey | camelToDash) + \'-column\', \'sort-\'+(gtSettings | getProperty:field.objectKey:\'sort\')]"><span ng-click=":gtRefresh:(gtSettings | getProperty:field.objectKey:\'sort\') === \'enable\' ? sort(field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'asc\' ? sort(field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'desc\' ? sort(field.objectKey):\'\'">{{::field.name}}</span></th></tr><tr ng-if=":gtRefresh:gtTotals" ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><td ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" class="total-column" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']" field-settings="::field" gt-render="" row-data="::gtTotals" gt-compile="::field.compile"></td></tr></thead><tbody><tr gt-row="" ng-repeat="row in :gtRefresh:gtDisplayData | limitTo: displayRows" gt-event="" ng-class=":gtRefresh:[gtRowTransition ? \'fade-in animate\':\'\',row.isOpen ? \'row-open\':\'\', $index % 2 == 0 ? \'row-odd\':\'row-even\']"><td ng-repeat="field in :gtRefresh:gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']"><span ng-class="::field.click ? \'gt-click-enabled\':\'\'" field-settings="::field" gt-render="" row-data="::row" gt-compile="::field.compile" ng-click=":gtRefresh:!field.click || field.click(row);!field.expand || toggleRow(field.expand,(gtSettings | filter:{\'visible\':true}:true).length,row,field.objectKey);"></span></td></tr></tbody><tr ng-if=":gtRefresh:pagination === false"><td class="gt-no-data" colspan="{{:gtRefresh:(gtSettings | filter:{\'visible\':true}:true).length}}">{{::gtNoDataTxt}}</td></tr></table><div class="gt-pagination text-center" ng-if=":gtRefresh:gtPagination === true && pagination !== false"><ul class="pagination"><li ng-class=":gtRefresh:{disabled: currentPage === 0}" ng-show="currentPage !== 0"><button class="btn-link link" ng-click="previousPage()" translate="ALL.GENERAL#PAGINATION_PREVIOUS#BUTTON" ng-disabled=":gtRefresh:currentPage === 0">&laquo; Prev</button></li><li ng-show=":gtRefresh:currentPage > 3"><button class="btn-link link" ng-click="setPage(0)">1</button><small>&hellip;</small></li><li style="display: inline;padding: 0 5px;" ng-repeat="page in :gtRefresh:pagination" ng-class=":gtRefresh:page === currentPage ? \'active\':\'\'"><button class="btn-link link" ng-click="setPage(page)">{{page+1}}</button></li><li ng-show=":gtRefresh:currentPage +1 < pages.length-1 && pages.length > 4"><small ng-show=":gtRefresh:currentPage + 3 < pages.length">&hellip;</small><button class="btn-link link" ng-click="setPage(pages.length-1)">{{pages.length}}</button></li><li ng-class=":gtRefresh:{disabled: currentPage == pages.length}" ng-show=":gtRefresh:currentPage+1 !== pages.length"><button class="btn-link link" ng-click="nextPage()" translate="ALL.GENERAL#PAGINATION_NEXT#BUTTON" ng-disabled=":gtRefresh:currentPage+1 === pages.length">Next &raquo;</button></li></ul></div></div></div>')}])}(),angular.module("generic.table").directive("genericTable",function(){return{restrict:"E",replace:!0,scope:{gtId:"=gtId",gtClasses:"@gtClasses",gtSettings:"=gtSettings",gtFields:"=gtFields",gtTotals:"=gtTotals",gtData:"=gtData",gtRows:"@gtRows",gtRowTransition:"@gtRowTransition",gtPagination:"@gtPagination",gtNoDataTxt:"@"},templateUrl:"directive/generic-table/generic-table.html",link:function(e,t,n,r){},controller:"genericTableController"}}).controller("genericTableController",["$scope","$filter","$timeout","CSV","$document",function(e,t,n,r,a){var i,o,g,s,l,c,d,f="undefined"==typeof e.gtSettings?!1:t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){return("desc"===e.sort?"-":"")+e.objectKey});e.gtPagination="undefined"==typeof e.gtPagination?!0:"false"!==e.gtPagination,e.gtRows="undefined"==typeof e.gtRows?20:e.gtRows,e.gtNoDataTxt="undefined"==typeof e.gtNoDataTxt?"No table data to display":e.gtNoDataTxt,e.gtId="undefined"==typeof e.gtId?e.$id:e.gtId;var u=function(){t("map")(e.gtSettings,function(n){try{var r=t("filter")(e.gtFields,{objectKey:n.objectKey},!0)[0];r.columnOrder=n.columnOrder,n["export"]===!1&&(r.exportField=!1)}catch(a){console.log('field definition object for property: "'+n.objectKey+'" not found.',a)}})};u();var p=function(t){e.gtHasData=!1,i=t.slice(0),e.$emit("gt-started-data-processing",e.gtId),h(t)},b=function(t){e.gtHasData=!1,i=t.slice(0),e.$emit("gt-started-data-processing",e.gtId),h(t)},h=function(n){l=t("map")(t("removeWith")(e.gtFields.slice(0),{search:!1}),"objectKey");var r=t("map")(t("filter")(e.gtSettings,{enabled:!0},!0),"objectKey");o=t("map")(n,function(n){var a={};return t("map")(r,function(r){if("undefined"!=typeof n[r])a[r]=n[r];else{var i=t("map")(t("filter")(e.gtFields,{objectKey:r},!0),"value")[0];i&&angular.isFunction(i)?a[r]=i(n):console.log('property: "'+r+'" does not exists in data object and no value function was declared')}}),a}),m(o)},m=function(e,n){var r=t("filter")(e.slice(0),c,function(e,t){return t.indexOf(e)>-1},!0).slice(0);g=t("searchRow")(r,l,n),y()},y=function(){s=f!==!1?t("gtSort")(g,f):g,v()},v=function(){e.pages=t("chunkBy")(s,parseInt(e.gtRows)),e.currentPage=0,e.loading=!0,e.$emit("gt-started-rendering"),e.gtDisplayData=e.pages[e.currentPage],w(e.pages.length,e.currentPage),n(function(){e.$emit("gt-finished-data-processing",e.gtId),e.gtHasData=!0},200),e.$broadcast("$$rebind::gtRefresh")};e.$on("gt-update-table:"+e.gtId,function(e,t){b(t)}),e.$on("gt-search-table:"+e.gtId,function(e,t){d=t,m(o.slice(0),t)}),e.$on("gt-filter-table:"+e.gtId,function(e,t){c=t,m(o.slice(0),d)}),e.$on("gt-update-structure:"+e.gtId,function(n,r){e.gtFields=r.fields,e.gtSettings=r.settings,u(),l=t("map")(t("removeWith")(e.gtFields.slice(0),{search:!1}),"objectKey"),f===!1||r.forceSorting===!0?f=t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){return("desc"===e.sort?"-":"")+e.objectKey}):(t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){e.sort="enable"}),t("map")(f,function(n){var r=-1===n.indexOf("-")?"asc":"desc";n=n.replace("-",""),t("filter")(e.gtSettings,{objectKey:n},!0)[0].sort=r}))}),e.$on("gt-paginate-table:"+e.gtId,function(t,n){e.gtRows=parseInt(n),v()}),e.$on("gt-export-csv:"+e.gtId,function(e,t){P(t)});var w=function(t,n){return e.pagination=[],0===t?(e.pagination=!1,void e.$emit("gt-table-filtered",{total:o.length,filtered:0,showingFrom:0,showingTo:0,pageLength:e.gtRows,currentPage:0,numberOfPages:0})):(2>t?e.pagination=[0]:3>t?e.pagination=[0,1]:4>t?e.pagination=[0,1,2]:5>t?e.pagination=[0,1,2,3]:4>n?e.pagination=[0,1,2,3,4]:t>n+1?e.pagination=[n-1,n,n+1]:t===n+1?e.pagination=[n-2,n-1,n]:t-4>n&&(e.pagination=[n-1,n,n+1,n+2]),void e.$emit("gt-table-filtered",{total:o.length,filtered:g.length,showingFrom:e.currentPage*e.gtRows+(e.currentPage>1?0:1),showingTo:e.currentPage*e.gtRows+e.gtDisplayData.length,pageLength:e.gtRows,currentPage:e.currentPage,numberOfPages:e.pages.length}))};e.nextPage=function(){try{e.currentPage++,e.gtDisplayData=e.pages[e.currentPage],w(e.pages.length,e.currentPage),e.$emit("gt-started-rendering",e.gtId),e.$broadcast("$$rebind::gtRefresh")}catch(t){console.log(t)}},e.previousPage=function(){try{e.currentPage--,e.gtDisplayData=e.pages[e.currentPage],w(e.pages.length,e.currentPage),e.$emit("gt-started-rendering",e.gtId),e.$broadcast("$$rebind::gtRefresh")}catch(t){console.log(t)}},e.setPage=function(t){try{e.currentPage=t,e.gtDisplayData=e.pages[e.currentPage],w(e.pages.length,e.currentPage),e.$emit("gt-started-rendering",e.gtId),e.$broadcast("$$rebind::gtRefresh")}catch(n){console.log(n)}},e.sort=function(n){if(n)for(var r=0;e.gtSettings.length>r;r++){var a=e.gtSettings[r];if(a.objectKey===n){var i=a.sort;switch(i){case"disable":break;case"enable":e.gtSettings[r].sort="asc";break;case"asc":e.gtSettings[r].sort="desc";break;case"desc":e.gtSettings[r].sort="enable"}}}f=t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){return("desc"===e.sort?"-":"")+e.objectKey}),y()},e.gtData&&p(e.gtData);var P=function(i){i="undefined"==typeof i?{}:i;for(var o="undefined"==typeof i.fileName?"export":i.fileName,g=JSON.parse(angular.toJson(s.slice(0))),l=0;l<g.length;l++){var c=g[l];for(var d in c)if(c.hasOwnProperty(d)){var f=t("filter")(e.gtFields,{objectKey:d},!0)[0],u=t("filter")(e.gtSettings,{objectKey:d},!0)[0],p=f["export"];p&&angular.isFunction(p)&&(c[d]=p(c,d)),"undefined"!=typeof i.exportColumns?-1===i.exportColumns.indexOf(u.objectKey)&&(c[d]=null):"undefined"!=typeof u["export"]&&u["export"]===!1&&(c[d]=null)}}var b=g;if("undefined"!=typeof i.exportColumns)var h=t("map")(i.exportColumns,function(n){return t("filter")(e.gtFields.slice(0),{objectKey:n},!0)[0]});else var h=t("orderBy")(t("removeWith")(e.gtFields,{exportField:!1}),"columnOrder");var m={fieldSep:"undefined"==typeof i.fieldSep?";":i.fieldSep,header:t("map")(h,"name"),txtDelim:"undefined"==typeof i.txtDelim?'"':i.txtDelim,columnOrder:t("map")(h,"objectKey"),decimalSep:"undefined"==typeof i.decimalSep?",":i.decimalSep,addByteOrderMarker:"undefined"==typeof i.addBom,charset:"undefined"==typeof i.charset?"utf-8":i.charset};r.stringify(b,m).then(function(e){var t;if(window.navigator.msSaveOrOpenBlob)t=new Blob([e],{type:"text/csv;charset=utf-8;"}),navigator.msSaveBlob(t,"export.csv");else if("Microsoft Internet Explorer"===window.navigator.appName){window.alert("You're using an old version of Internet Explorer and the export might therefore have the wrong format, please update your browser.");var r=angular.element("<iframe></iframe>");r[0].style.display="none";var i=angular.element("body");i.append(r);var g=null;r[0].contentDocument?g=r[0].contentDocument:r[0].contentWindow&&(g=r[0].contentWindow.document),g.open("text/plain","replace"),g.write([e]),g.close(),g.execCommand("SaveAs",!0,o+".csv")}else{t=new Blob([e],{type:"text/csv;charset=utf-8;"});var s=angular.element("<a></a>");s.attr("href",window.URL.createObjectURL(t)),s.attr("download",o+".csv"),a.find("body").append(s),n(function(){s[0].click(),s.remove()},null)}})}}]).directive("gtRow",["$compile",function(e){return{restrict:"A",scope:!1,link:function(t,n,r,a){t.toggleRow=function(r,a,i,o){if(t.row.isOpen)n.next().remove(),t.row.isOpen=!1;else{var i=e('<tr class="expanded-row"><td colspan="'+a+'">'+r+"</td></tr>")(t);n.after(i),t.row.isOpen=!0}t.$broadcast("$$rebind::gtRefresh")}}}}]).directive("gtEvent",function(){return{restrict:"A",link:function(e,t,n,r){e.$last&&e.$emit("gt-finished-rendering",e.gtId)}}}).directive("gtRender",["$compile",function(e){return{restrict:"A",scope:{row:"=rowData",settings:"=fieldSettings",compile:"=gtCompile"},link:function(t,n,r,a){var i,o=t.row,g=t.settings.objectKey,s=t.settings.render;i=s&&angular.isFunction(s)?s(o,g):o[g],t.compile===!0&&(i=e(i)(t.$parent)),n.append(i)}}}]).filter("getProperty",["$filter",function(e){return function(t,n,r){try{var a=e("filter")(t,{objectKey:n},!0)[0][r]}catch(i){console.log('cannot read property: "'+r+'" on missing key: "'+n+'" in settings.',i)}return a}}]).filter("searchRow",["$filter",function(e){return function(t,n,r){for(var a=[],r="undefined"==typeof r?"":r,i=r.toLowerCase().split(" "),o=0;o<t.length;o++){var g=t[o],s="";e("map")(n,function(e){s+=g[e]}),s=s.toLowerCase();for(var l=!0,c=0;c<i.length;c++){var d=i[c];if(l=-1!==s.indexOf(d),!l)break}l&&a.push(g)}return a}}]).filter("camelToDash",function(){return function(e){try{return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}catch(t){console.log("nothing to replace:",t)}}}).filter("gtSort",function(){return function(e,t){function n(e){var t=1;return"-"===e[0]&&(t=-1,e=e.substr(1)),function(n,r){var a=n[e]<r[e]?-1:n[e]>r[e]?1:0;return a*t}}function r(e){var t=e;return function(e,r){for(var a=0,i=0,o=t.length;0===i&&o>a;)i=n(t[a])(e,r),a++;return i}}return e.sort(r(t))}});
//# sourceMappingURL=data:application/json;base64,
