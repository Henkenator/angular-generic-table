angular.module("angular.generic.table",["ngAnimate","angular.filter","angular.bind.notifier","ngCsv"]),!function(e){try{e=angular.module("angular.generic.table")}catch(t){e=angular.module("angular.generic.table",[])}e.run(["$templateCache",function(e){e.put("generic-table/directive/generic-table/generic-table.html",'<div class="generic-table"><div class="gt-wrapper"><table class="table table-sortable" ng-if="gtHasData" ng-class=":gtRefresh:gtClasses"><thead><tr ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><th ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="[field.classNames, (field.objectKey | camelToDash) + \'-column\', \'sort-\'+(gtSettings | getProperty:field.objectKey:\'sort\')]" ng-click=":gtRefresh:(gtSettings | getProperty:field.objectKey:\'sort\') === \'enable\' ? sort($event,field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'asc\' ? sort($event,field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'desc\' ? sort($event,field.objectKey):\'\'" ng-bind="::field.name"></th></tr><tr ng-if="::gtTotals" ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><td ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" class="total-column" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']" field-settings="::field" gt-render="" active-bindings="::bindings" row-data="::gtTotals" gt-compile="::field.compile"></td></tr></thead><tbody><tr gt-row="" ng-repeat="(rowIndex, row) in :gtRefresh:gtDisplayData | limitTo: displayRows" gt-event="" ng-class=":gtRefresh:[gtRowTransition ? \'fade-in animate\':\'\',row.isOpen ? \'row-open\':\'\', $index % 2 == 0 ? \'row-odd\':\'row-even\', gtRowInfo[$index] ? \'true-class\':\'false-class\']"><td ng-repeat="(fieldIndex, field) in :gtRefresh:gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']"><span class="gt-row-label" ng-if="::(gtFields | getProperty:field.objectKey:\'stackedHeading\')" ng-bind="::(gtFields | getProperty:field.objectKey:\'stackedHeading\')=== true ? (gtFields | getProperty:field.objectKey:\'name\'):(gtFields | getProperty:field.objectKey:\'stackedHeading\')"></span><span class="gt-row-content" ng-class="::field.click ? \'gt-click-enabled\':\'\'" field-settings="::field" gt-render="" active-bindings="::bindings" row-data="::row" gt-compile="::field.compile" ng-click=":gtRefresh:!field.click || field.click(row);!field.expand || toggleRow(field.expand,(gtSettings | filter:{\'visible\':true}:true).length,row,field.objectKey);"></span></td></tr></tbody><tr ng-if=":gtRefresh:pagination === false"><td class="gt-no-data" colspan="{{:gtRefresh:(gtSettings | filter:{\'visible\':true}:true).length}}" ng-bind="::gtTranslations.noData"></td></tr></table></div><div class="gt-pagination text-center" ng-if=":gtRefresh:gtPagination === true && pagination !== false"><ul class="pagination"><li ng-class=":gtRefresh:{disabled: currentPage === 0}" ng-show="currentPage !== 0"><button class="btn-link link" ng-click="previousPage()" ng-disabled=":gtRefresh:currentPage === 0" ng-bind-html="::gtTranslations.previous"></button></li><li ng-show=":gtRefresh:currentPage > 3"><button class="btn-link link" ng-click="setPage(0)">1</button><small>&hellip;</small></li><li style="display: inline;padding: 0 5px;" ng-repeat="page in :gtRefresh:pagination" ng-class=":gtRefresh:page === currentPage ? \'active\':\'\'"><button class="btn-link link" ng-click="setPage(page)" ng-bind="page+1"></button></li><li ng-show=":gtRefresh:currentPage +1 < pages.length-1 && pages.length > 4"><small ng-show=":gtRefresh:currentPage + 3 < pages.length">&hellip;</small><button class="btn-link link" ng-click="setPage(pages.length-1)" ng-bind="pages.length"></button></li><li ng-class=":gtRefresh:{disabled: currentPage == pages.length}" ng-show=":gtRefresh:currentPage+1 !== pages.length"><button class="btn-link link" ng-click="nextPage()" ng-disabled=":gtRefresh:currentPage+1 === pages.length" ng-bind-html="::gtTranslations.next"></button></li></ul></div></div>')}])}(),angular.module("angular.generic.table").directive("genericTable",function(){return{restrict:"E",replace:!0,scope:{gtId:"=?gtId",gtClasses:"@gtClasses",gtSettings:"=gtSettings",gtFields:"=gtFields",gtTotals:"=?gtTotals",gtData:"=?gtData",gtRows:"@gtRows",gtRowTransition:"@gtRowTransition",gtPagination:"@gtPagination",gtExpand:"=?",gtTranslations:"=?"},templateUrl:"generic-table/directive/generic-table/generic-table.html",link:function(e,t,n,r){},controller:"genericTableController"}}).controller("genericTableController",["$scope","$filter","$timeout","CSV","$document",function(e,t,n,r,i){var a,o,s,g,l,c,d,f="undefined"==typeof e.gtSettings?!1:t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){return("desc"===e.sort?"-":"")+e.objectKey});e.gtPagination="undefined"==typeof e.gtPagination?!0:"false"!==e.gtPagination,e.gtRows="undefined"==typeof e.gtRows?20:e.gtRows,e.gtTranslations="undefined"==typeof e.gtTranslations?{}:e.gtTranslations,e.gtTranslations.noData="undefined"==typeof e.gtTranslations.noData?"No table data to display":e.gtTranslations.noData,e.gtTranslations.previous="undefined"==typeof e.gtTranslations.previous?"&laquo; Prev":e.gtTranslations.previous,e.gtTranslations.next="undefined"==typeof e.gtTranslations.next?"Next &raquo;":e.gtTranslations.next,e.gtId="undefined"==typeof e.gtId?e.$id:e.gtId,e.gtExpand="undefined"==typeof e.gtExpand?{}:e.gtExpand,e.gtExpand.directive="undefined"==typeof e.gtExpand.directive?"":e.gtExpand.directive,e.gtExpand.multiple="undefined"==typeof e.gtExpand.multiple?!1:e.gtExpand.multiple,e.gtExpand.rows="undefined"==typeof e.gtExpand.rows?[]:e.gtExpand.rows,e.bindings=[],console.log(e.gtExpand),e.syncRows=function(t,n){if(t&&e.gtDisplayData){for(var r=0;r<e.gtDisplayData.length;r++)-1===e.gtExpand.rows.indexOf(r)&&e.$broadcast("$gt-open-row:"+r,n);e.$broadcast("$$rebind::gtRefresh")}else if(e.gtDisplayData){for(var r=0;r<e.gtRows;r++)-1!==e.gtExpand.rows.indexOf(r)&&e.$broadcast("$gt-close-row:"+r);e.$broadcast("$$rebind::gtRefresh")}if(e.bindings.length>0)for(var r=0;r<e.bindings.length;r++)e.bindings[r].$destroy()};var u=function(){t("map")(e.gtSettings,function(n){try{var r=t("filter")(e.gtFields,{objectKey:n.objectKey},!0)[0];r.columnOrder=n.columnOrder,n["export"]===!1&&(r.exportField=!1)}catch(i){console.log('field definition object for property: "'+n.objectKey+'" not found.',i)}})};u();var p=function(t){e.gtHasData=!1,a=t.slice(0),e.$emit("gt-started-data-processing",e.gtId),y(t)},b=function(t){e.gtHasData=!1,a=t.slice(0),e.$emit("gt-started-data-processing",e.gtId),y(t)},y=function(n){l=t("map")(t("removeWith")(e.gtFields.slice(0),{search:!1}),"objectKey");var r=t("map")(t("filter")(e.gtSettings,{enabled:!0},!0),"objectKey");o=t("map")(n,function(n){var i={};return t("map")(r,function(r){if("undefined"!=typeof n[r])i[r]=n[r];else{var a=t("map")(t("filter")(e.gtFields,{objectKey:r},!0),"value")[0];a&&angular.isFunction(a)?i[r]=a(n):console.log('property: "'+r+'" does not exists in data object and no value function was declared')}}),i}),h(o)},h=function(n,r){var i=t("filter")(n.slice(0),c,function(e,t){return t.indexOf(e)>-1},!0).slice(0);s=t("searchRow")(i,l,r,e.gtFields),m()},m=function(){g=f!==!1?t("gtSort")(s,f,e.gtFields):s,v()},v=function(){e.pages=t("chunkBy")(g,parseInt(e.gtRows)),e.currentPage=0,e.loading=!0,e.$emit("gt-started-rendering"),e.gtDisplayData=e.pages[e.currentPage],w(e.pages.length,e.currentPage),n(function(){e.$emit("gt-finished-data-processing",e.gtId),e.gtHasData=!0},200),e.$broadcast("$$rebind::gtRefresh")};e.$on("gt-update-table:"+e.gtId,function(e,t){b(t)}),e.$on("gt-search-table:"+e.gtId,function(e,t){d=t,h(o.slice(0),t)}),e.$on("gt-filter-table:"+e.gtId,function(e,t){c=t,h(o.slice(0),d)}),e.$on("gt-open-all-rows:"+e.gtId,function(t,n){e.syncRows(!0,!0)}),e.$on("gt-close-all-rows:"+e.gtId,function(t,n){e.syncRows(!1)}),e.$on("gt-update-structure:"+e.gtId,function(n,r){e.gtFields=r.fields,e.gtSettings=r.settings,u(),l=t("map")(t("removeWith")(e.gtFields.slice(0),{search:!1}),"objectKey"),f===!1||r.forceSorting===!0?f=t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){return("desc"===e.sort?"-":"")+e.objectKey}):(t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){e.sort="enable"}),t("map")(f,function(n){var r=-1===n.indexOf("-")?"asc":"desc";n=n.replace("-",""),t("filter")(e.gtSettings,{objectKey:n},!0)[0].sort=r}))}),e.$on("gt-paginate-table:"+e.gtId,function(t,n){e.gtRows=parseInt(n),v()}),e.$on("gt-export-csv:"+e.gtId,function(e,t){x(t)});var w=function(t,n){return e.syncRows(!1),e.pagination=[],0===t?(e.pagination=!1,void e.$emit("gt-table-filtered",{total:o.length,filtered:0,showingFrom:0,showingTo:0,pageLength:e.gtRows,currentPage:0,numberOfPages:0})):(2>t?e.pagination=[0]:3>t?e.pagination=[0,1]:4>t?e.pagination=[0,1,2]:5>t?e.pagination=[0,1,2,3]:4>n?e.pagination=[0,1,2,3,4]:t>n+1?e.pagination=[n-1,n,n+1]:t===n+1?e.pagination=[n-2,n-1,n]:t-4>n&&(e.pagination=[n-1,n,n+1,n+2]),void e.$emit("gt-table-filtered",{total:o.length,filtered:s.length,showingFrom:e.currentPage*e.gtRows+(e.currentPage>1?0:1),showingTo:e.currentPage*e.gtRows+e.gtDisplayData.length,pageLength:e.gtRows,currentPage:e.currentPage,numberOfPages:e.pages.length}))};e.nextPage=function(){try{e.currentPage++,e.gtDisplayData=e.pages[e.currentPage],w(e.pages.length,e.currentPage),e.$emit("gt-started-rendering",e.gtId),e.$broadcast("$$rebind::gtRefresh")}catch(t){console.log(t)}},e.previousPage=function(){try{e.currentPage--,e.gtDisplayData=e.pages[e.currentPage],w(e.pages.length,e.currentPage),e.$emit("gt-started-rendering",e.gtId),e.$broadcast("$$rebind::gtRefresh")}catch(t){console.log(t)}},e.setPage=function(t){try{e.currentPage=t,e.gtDisplayData=e.pages[e.currentPage],w(e.pages.length,e.currentPage),e.$emit("gt-started-rendering",e.gtId),e.$broadcast("$$rebind::gtRefresh")}catch(n){console.log(n)}},e.sort=function(n,r){var i=n.ctrlKey||n.metaKey;if(!i&&r)for(var a=0;e.gtSettings.length>a;a++){var o=e.gtSettings[a];(o.objectKey!==r&&"asc"===o.sort||o.objectKey!==r&&"desc"===o.sort)&&(e.gtSettings[a].sort="enable")}if(r)for(var a=0;e.gtSettings.length>a;a++){var o=e.gtSettings[a];if(o.objectKey===r){var s=o.sort;switch(s){case"disable":break;case"enable":e.gtSettings[a].sort="asc";break;case"asc":e.gtSettings[a].sort="desc";break;case"desc":e.gtSettings[a].sort="enable"}}}f=t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){return("desc"===e.sort?"-":"")+e.objectKey}),m()},e.gtData&&p(e.gtData);var x=function(a){a="undefined"==typeof a?{}:a;for(var o="undefined"==typeof a.fileName?"export":a.fileName,s=JSON.parse(angular.toJson(g.slice(0))),l=0;l<s.length;l++){var c=s[l];for(var d in c)if(c.hasOwnProperty(d)){var f=t("filter")(e.gtFields,{objectKey:d},!0)[0],u=t("filter")(e.gtSettings,{objectKey:d},!0)[0],p=f["export"];if(p&&angular.isFunction(p)){var b=p(c,d);c[d]=f.exportEscapeString===!1?b:t("escapeCsvString")(b)}else c[d]=f.exportEscapeString===!1?c[d]:t("escapeCsvString")(c[d]);"undefined"!=typeof a.exportColumns?-1===a.exportColumns.indexOf(u.objectKey)&&(c[d]=null):"undefined"!=typeof u["export"]&&u["export"]===!1&&(c[d]=null)}}var y=s;if("undefined"!=typeof a.exportColumns)var h=t("map")(a.exportColumns,function(n){return t("filter")(e.gtFields.slice(0),{objectKey:n},!0)[0]});else var h=t("orderBy")(t("removeWith")(e.gtFields,{exportField:!1}),"columnOrder");var m={fieldSep:"undefined"==typeof a.fieldSep?";":a.fieldSep,header:t("map")(h,"name"),txtDelim:"undefined"==typeof a.txtDelim?'"':a.txtDelim,columnOrder:t("map")(h,"objectKey"),decimalSep:"undefined"==typeof a.decimalSep?",":a.decimalSep,addByteOrderMarker:"undefined"==typeof a.addBom,charset:"undefined"==typeof a.charset?"utf-8":a.charset,quoteStrings:"undefined"==typeof a.quoteStrings?!1:a.quoteStrings};r.stringify(y,m).then(function(e){var t;if(window.navigator.msSaveOrOpenBlob)t=new Blob([e],{type:"text/csv;charset=utf-8;"}),navigator.msSaveBlob(t,"export.csv");else if("Microsoft Internet Explorer"===window.navigator.appName){window.alert("You're using an old version of Internet Explorer and the export might therefore have the wrong format, please update your browser.");var r=angular.element("<iframe></iframe>");r[0].style.display="none";var a=angular.element("body");a.append(r);var s=null;r[0].contentDocument?s=r[0].contentDocument:r[0].contentWindow&&(s=r[0].contentWindow.document),s.open("text/plain","replace"),s.write([e]),s.close(),s.execCommand("SaveAs",!0,o+".csv")}else{t=new Blob([e],{type:"text/csv;charset=utf-8;"});var g=angular.element("<a></a>");g.attr("href",window.URL.createObjectURL(t)),g.attr("download",o+".csv"),i.find("body").append(g),n(function(){g[0].click(),g.remove()},null)}})}}]).directive("gtRow",["$compile","$filter",function(e,t){return{restrict:"A",scope:!1,link:function(n,r,i,a){var o=t("filter")(n.gtSettings,{visible:!0},!0).length,s=function(t){n.gtExpand.multiple||t?"":n.syncRows(!1);var i=n.$new(),a=e('<tr class="expanded-row"><td colspan="'+o+'">'+n.gtExpand.directive+"</td></tr>")(i);r.after(a),n.row.isOpen=!0,n.gtExpand.rows.push(l)},g=function(){r.next().scope().$destroy(),r.next().remove(),n.row.isOpen=!1,n.gtExpand.rows.splice(n.gtExpand.rows.indexOf(l),1)},l=n.$index;n.toggleRow=function(){var e=-1!==n.gtExpand.rows.indexOf(l);e?g():s(),n.$broadcast("$$rebind::gtRefresh")},n.$on("$gt-open-row:"+l,function(e,t){var r=-1!==n.gtExpand.rows.indexOf(l);r||s(t)}),n.$on("$gt-close-row:"+l,function(){var e=-1!==n.gtExpand.rows.indexOf(l);e&&g()})}}}]).directive("gtEvent",function(){return{restrict:"A",link:function(e,t,n,r){e.$last&&e.$emit("gt-finished-rendering",e.gtId)}}}).directive("gtRender",["$compile",function(e){return{restrict:"A",scope:{row:"=rowData",settings:"=fieldSettings",compile:"=gtCompile",activeBindings:"=activeBindings"},link:function(t,n,r,i){var a,o=t.row,s=t.settings.objectKey,g=t.settings.render;if(a=g&&angular.isFunction(g)?g(o,s):o[s],t.compile&&t.compile!==!1){var l;t.compile!==!0&&t.compile.$watch?(l=t.compile.$new(),t.activeBindings.push(l)):l=t.$parent.$new(),a=e(a)(l),n.append(a)}else n[0].innerHTML=a}}}]).filter("getProperty",["$filter",function(e){return function(t,n,r){try{var i=e("filter")(t,{objectKey:n},!0)[0][r]}catch(a){console.log('cannot read property: "'+r+'" on missing key: "'+n+'" in settings.',a)}return i}}]).filter("searchRow",["$filter","$interpolate",function(e,t){return function(t,n,r,i){for(var a={},o=0;o<i.length;o++){var s=i[o];if(s.search&&angular.isFunction(s.search)){var g=s.objectKey;a[g]=s.search}}if(!r||0===r.replace(/"/g,"").length)return t;var l=[];r="undefined"==typeof r?"":r;for(var c=r.toLowerCase().match(/"[^"]+"|[\w]+/g),d=0;d<t.length;d++){var f=t[d],u="",p=0;e("map")(n,function(e){var t=0===p?"":" & ";u+=a[e]?t+a[e](f,e):t+f[e],p++}),u=u.toLowerCase();for(var b=!0,o=0;o<c.length;o++){var y=c[o].replace(/"/g,"");if(b=-1!==u.indexOf(y),!b)break}b&&l.push(f)}return l}}]).filter("camelToDash",function(){return function(e){try{return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}catch(t){console.log("nothing to replace:",t)}}}).filter("gtSort",function(){return function(e,t,n){function r(e){var t=1;return"-"===e[0]&&(t=-1,e=e.substr(1)),function(n,r){var i=null===n[e]?"":a[e]?a[e](n,e):n[e],o=null===r[e]?"":a[e]?a[e](r,e):r[e],s=o>i?-1:i>o?1:0;return s*t}}function i(e){var t=e;return function(e,n){for(var i=0,a=0,o=t.length;0===a&&o>i;)a=r(t[i])(e,n),i++;return a}}for(var a={},o=0;o<n.length;o++){var s=n[o];s.sort&&angular.isFunction(s.sort)&&(a[s.objectKey]=s.sort)}return e.sort(i(t))}}).filter("escapeCsvString",function(){return function(e){return/^(\=|\@|\+,\-).*/g.test(e)?"'"+e:e}});
//# sourceMappingURL=data:application/json;base64,
