!function(e){try{e=angular.module("generic.table")}catch(t){e=angular.module("generic.table",[])}e.run(["$templateCache",function(e){e.put("directive/generic-table/generic-table.html",'<div class="generic-table"><div class="gt-wrapper"><table class="table table-condensed table-hover table-sortable" ng-if="gtHasData"><thead><tr ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><th ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class=":gtRefresh:[field.classNames, (field.objectKey | camelToDash) + \'-column\', \'sort-\'+(gtSettings | getProperty:field.objectKey:\'sort\')]"><span ng-click=":gtRefresh:(gtSettings | getProperty:field.objectKey:\'sort\') === \'enable\' ? sort(field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'asc\' ? sort(field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'desc\' ? sort(field.objectKey):\'\'">{{::field.name}}</span></th></tr><tr ng-if="gtTotals" ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><td ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" class="total-column" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']" ng-bind-html="::gtFields | gtRender:gtTotals:field.objectKey"></td></tr></thead><tbody><tr ng-repeat="row in gtDisplayData | limitTo: displayRows" gt-event="" ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><td ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']"><span ng-class="::field.click ? \'gt-click-enabled\':\'\'" ng-bind-html="::gtFields | gtRender:row:field.objectKey" ng-click="::!field.click || field.click(row)"></span></td></tr></tbody><tr ng-if="pagination === false"><td class="gt-no-data" colspan="{{:gtRefresh:(gtSettings | filter:{\'visible\':true}:true).length}}">{{::gtNoDataTxt}}</td></tr></table></div><div class="gt-pagination text-center" ng-if="gtPagination === true && pagination !== false"><ul class="pagination"><li ng-class="{disabled: currentPage === 0}" ng-show="currentPage !== 0"><button class="btn-link link" ng-click="previousPage()" translate="ALL.GENERAL#PAGINATION_PREVIOUS#BUTTON" ng-disabled="currentPage === 0">« Prev</button></li><li ng-show="currentPage > 3"><button class="btn-link link" ng-click="setPage(0)">1</button><small>…</small></li><li style="display: inline;padding: 0 5px;" ng-repeat="page in pagination" ng-class="page === currentPage ? \'active\':\'\'"><button class="btn-link link" ng-click="setPage(page)">{{page+1}}</button></li><li ng-show="currentPage +1 < pages.length-1 && pages.length > 4"><small ng-show="currentPage + 3 < pages.length">…</small><button class="btn-link link" ng-click="setPage(pages.length-1)">{{pages.length}}</button></li><li ng-class="{disabled: currentPage == pages.length}" ng-show="currentPage+1 !== pages.length"><button class="btn-link link" ng-click="nextPage()" translate="ALL.GENERAL#PAGINATION_NEXT#BUTTON" ng-disabled="currentPage+1 === pages.length">Next »</button></li></ul></div></div>')}])}(),!function(e){try{e=angular.module("generic.table")}catch(t){e=angular.module("generic.table",[])}e.run(["$templateCache",function(e){e.put("directive/generic-table/generic-table.html",'<div class="generic-table"><table class="table table-sortable" ng-if="gtHasData" ng-class="gtClasses"><thead><tr ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><th ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class=":gtRefresh:[field.classNames, (field.objectKey | camelToDash) + \'-column\', \'sort-\'+(gtSettings | getProperty:field.objectKey:\'sort\')]"><span ng-click=":gtRefresh:(gtSettings | getProperty:field.objectKey:\'sort\') === \'enable\' ? sort(field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'asc\' ? sort(field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'desc\' ? sort(field.objectKey):\'\'">{{::field.name}}</span></th></tr><tr ng-if="gtTotals" ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><td ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" class="total-column" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']" ng-bind-html="::gtFields | gtRender:gtTotals:field.objectKey"></td></tr></thead><tbody><tr ng-repeat="row in gtDisplayData | limitTo: displayRows" gt-event="" ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><td ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']"><span ng-class="::field.click ? \'gt-click-enabled\':\'\'" ng-bind-html="::gtFields | gtRender:row:field.objectKey" ng-click="::!field.click || field.click(row)"></span></td></tr></tbody><tr ng-if="pagination === false"><td class="gt-no-data" colspan="{{:gtRefresh:(gtSettings | filter:{\'visible\':true}:true).length}}">{{::gtNoDataTxt}}</td></tr></table><div class="gt-pagination text-center" ng-if="gtPagination === true && pagination !== false"><ul class="pagination"><li ng-class="{disabled: currentPage === 0}" ng-show="currentPage !== 0"><button class="btn-link link" ng-click="previousPage()" translate="ALL.GENERAL#PAGINATION_PREVIOUS#BUTTON" ng-disabled="currentPage === 0">« Prev</button></li><li ng-show="currentPage > 3"><button class="btn-link link" ng-click="setPage(0)">1</button><small>…</small></li><li style="display: inline;padding: 0 5px;" ng-repeat="page in pagination" ng-class="page === currentPage ? \'active\':\'\'"><button class="btn-link link" ng-click="setPage(page)">{{page+1}}</button></li><li ng-show="currentPage +1 < pages.length-1 && pages.length > 4"><small ng-show="currentPage + 3 < pages.length">…</small><button class="btn-link link" ng-click="setPage(pages.length-1)">{{pages.length}}</button></li><li ng-class="{disabled: currentPage == pages.length}" ng-show="currentPage+1 !== pages.length"><button class="btn-link link" ng-click="nextPage()" translate="ALL.GENERAL#PAGINATION_NEXT#BUTTON" ng-disabled="currentPage+1 === pages.length">Next »</button></li></ul></div></div>')}])}(),!function(e){try{e=angular.module("generic.table")}catch(t){e=angular.module("generic.table",[])}e.run(["$templateCache",function(e){e.put("directive/generic-table/generic-table.html",'<div class="generic-table"><table class="table table-sortable" ng-if="gtHasData" ng-class="gtClasses"><thead><tr ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><th ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class=":gtRefresh:[field.classNames, (field.objectKey | camelToDash) + \'-column\', \'sort-\'+(gtSettings | getProperty:field.objectKey:\'sort\')]"><span ng-click=":gtRefresh:(gtSettings | getProperty:field.objectKey:\'sort\') === \'enable\' ? sort(field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'asc\' ? sort(field.objectKey):(gtSettings | getProperty:field.objectKey:\'sort\') === \'desc\' ? sort(field.objectKey):\'\'">{{::field.name}}</span></th></tr><tr ng-if="gtTotals" ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><td ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" class="total-column" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']" ng-bind-html="::gtFields | gtRender:gtTotals:field.objectKey"></td></tr></thead><tbody><tr ng-repeat="row in gtDisplayData | limitTo: displayRows" gt-event="" ng-class="::gtRowTransition ? \'fade-in animate\':\'\'"><td ng-repeat="field in ::gtFields | orderBy:\'columnOrder\' track by field.objectKey" ng-show=":gtRefresh:gtSettings | getProperty:field.objectKey:\'visible\'" ng-class="::[(gtFields | getProperty:field.objectKey:\'classNames\'), (field.objectKey | camelToDash) + \'-column\']"><span ng-class="::field.click ? \'gt-click-enabled\':\'\'" ng-bind-html="::gtFields | gtRender:row:field.objectKey" ng-click="::!field.click || field.click(row)"></span></td></tr></tbody><tr ng-if="pagination === false"><td class="gt-no-data" colspan="{{:gtRefresh:(gtSettings | filter:{\'visible\':true}:true).length}}">{{::gtNoDataTxt}}</td></tr></table><div class="gt-pagination text-center" ng-if="gtPagination === true && pagination !== false"><ul class="pagination"><li ng-class="{disabled: currentPage === 0}" ng-show="currentPage !== 0"><button class="btn-link link" ng-click="previousPage()" translate="ALL.GENERAL#PAGINATION_PREVIOUS#BUTTON" ng-disabled="currentPage === 0">« Prev</button></li><li ng-show="currentPage > 3"><button class="btn-link link" ng-click="setPage(0)">1</button><small>…</small></li><li style="display: inline;padding: 0 5px;" ng-repeat="page in pagination" ng-class="page === currentPage ? \'active\':\'\'"><button class="btn-link link" ng-click="setPage(page)">{{page+1}}</button></li><li ng-show="currentPage +1 < pages.length-1 && pages.length > 4"><small ng-show="currentPage + 3 < pages.length">…</small><button class="btn-link link" ng-click="setPage(pages.length-1)">{{pages.length}}</button></li><li ng-class="{disabled: currentPage == pages.length}" ng-show="currentPage+1 !== pages.length"><button class="btn-link link" ng-click="nextPage()" translate="ALL.GENERAL#PAGINATION_NEXT#BUTTON" ng-disabled="currentPage+1 === pages.length">Next »</button></li></ul></div></div>')}])}(),angular.module("generic.table").directive("genericTable",function(){return{restrict:"E",replace:!0,scope:{gtId:"=gtId",gtClasses:"@gtClasses",gtSettings:"=gtSettings",gtFields:"=gtFields",gtTotals:"=gtTotals",gtData:"=gtData",gtRows:"@gtRows",gtRowTransition:"@gtRowTransition",gtPagination:"@gtPagination",gtNoDataTxt:"@"},templateUrl:"directive/generic-table/generic-table.html",link:function(e,t,n,a){},controller:"genericTableController"}}).controller("genericTableController",["$scope","$filter","$timeout","CSV","$document",function(e,t,n,a,i){var l,g,r,s="undefined"==typeof e.gtSettings?!1:t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){return("desc"===e.sort?"-":"")+e.objectKey});e.gtPagination="undefined"==typeof e.gtPagination?!0:"false"!==e.gtPagination,e.gtRows="undefined"==typeof e.gtRows?20:e.gtRows,e.gtNoDataTxt="undefined"==typeof e.gtNoDataTxt?"No table data to display":e.gtNoDataTxt,e.gtId="undefined"==typeof e.gtId?e.$id:e.gtId,t("map")(e.gtSettings,function(n){try{var a=t("filter")(e.gtFields,{objectKey:n.objectKey},!0)[0];a.columnOrder=n.columnOrder,n["export"]===!1&&(a.exportField=!1)}catch(i){console.log('field definition object for property: "'+n.objectKey+'" not found.',i)}});var o=function(t){e.gtHasData=!1,l=t.slice(0),e.$emit("gt-started-data-processing",e.gtId),d(t)},c=function(t){e.gtHasData=!1,l=t.slice(0),e.$emit("gt-started-data-processing",e.gtId),d(t)},d=function(e){var t=e;f(t),t.length=0},f=function(n){var a=t("map")(t("filter")(e.gtSettings,{enabled:!0},!0),"objectKey");g=t("map")(n,function(n){var i={};return t("map")(a,function(a){if("undefined"!=typeof n[a])i[a]=n[a];else{var l=t("map")(t("filter")(e.gtFields,{objectKey:a},!0),"value")[0];l&&angular.isFunction(l)?i[a]=l(n):console.log('property: "'+a+'" does not exists in data object and no value function was declared')}}),i}),u()},u=function(){r=s!==!1?t("gtSort")(g,s):g,e.$broadcast("$$rebind::gtRefresh"),p()},p=function(){e.pages=t("chunkBy")(r,parseInt(e.gtRows)),e.currentPage=0,e.loading=!0,e.$emit("gt-started-rendering"),e.gtDisplayData=e.pages[e.currentPage],b(e.pages.length,e.currentPage),n(function(){e.$emit("gt-finished-data-processing",e.gtId),e.gtHasData=!0},200)};e.$on("gt-update-table:"+e.gtId,function(e,t){c(t)}),e.$on("gt-update-structure:"+e.gtId,function(n,a){e.gtFields=a.fields,e.gtSettings=a.settings,s===!1||a.forceSorting===!0?s=t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){return("desc"===e.sort?"-":"")+e.objectKey}):(t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){e.sort="enable"}),t("map")(s,function(n){var a=-1===n.indexOf("-")?"asc":"desc";n=n.replace("-",""),t("filter")(e.gtSettings,{objectKey:n},!0)[0].sort=a}))}),e.$on("gt-paginate-table:"+e.gtId,function(t,n){e.gtRows=parseInt(n),p()}),e.$on("gt-export-csv:"+e.gtId,function(e,t){y(t)});var b=function(t,n){return e.pagination=[],0===t?void(e.pagination=!1):void(2>t?e.pagination=[0]:3>t?e.pagination=[0,1]:4>t?e.pagination=[0,1,2]:5>t?e.pagination=[0,1,2,3]:4>n?e.pagination=[0,1,2,3,4]:t>n+1?e.pagination=[n-1,n,n+1]:t===n+1?e.pagination=[n-2,n-1,n]:t-4>n&&(e.pagination=[n-1,n,n+1,n+2]))};e.nextPage=function(){try{e.currentPage++,b(e.pages.length,e.currentPage),e.$emit("gt-started-rendering",e.gtId),e.gtDisplayData=e.pages[e.currentPage]}catch(t){console.log(t)}},e.previousPage=function(){e.currentPage--,b(e.pages.length,e.currentPage),e.$emit("gt-started-rendering",e.gtId),e.gtDisplayData=e.pages[e.currentPage]},e.setPage=function(t){e.currentPage=t,b(e.pages.length,e.currentPage),e.$emit("gt-started-rendering",e.gtId),e.gtDisplayData=e.pages[e.currentPage]},e.sort=function(n){if(n)for(var a=0;e.gtSettings.length>a;a++){var i=e.gtSettings[a];if(i.objectKey===n){var l=i.sort;switch(l){case"disable":break;case"enable":e.gtSettings[a].sort="asc";break;case"asc":e.gtSettings[a].sort="desc";break;case"desc":e.gtSettings[a].sort="enable"}}}s=t("map")(t("filter")(e.gtSettings,{sort:"asc desc"},function(e,t){return t.indexOf(e)>-1}),function(e){return("desc"===e.sort?"-":"")+e.objectKey}),u()},e.gtData&&o(e.gtData);var y=function(l){l="undefined"==typeof l?{}:l;for(var g="undefined"==typeof l.fileName?"export":l.fileName,s=JSON.parse(angular.toJson(r.slice(0))),o=0;o<s.length;o++){var c=s[o];for(var d in c)if(c.hasOwnProperty(d)){var f=t("filter")(e.gtFields,{objectKey:d},!0)[0],u=t("filter")(e.gtSettings,{objectKey:d},!0)[0],p=f["export"];p&&angular.isFunction(p)&&(c[d]=p(c,d)),"undefined"!=typeof u["export"]&&u["export"]===!1&&(c[d]=null)}}var b=s,y=t("orderBy")(t("removeWith")(e.gtFields,{exportField:!1}),"columnOrder"),m={fieldSep:"undefined"==typeof l.fieldSep?";":l.fieldSep,header:t("map")(y,"name"),txtDelim:"undefined"==typeof l.txtDelim?'"':l.txtDelim,columnOrder:t("map")(y,"objectKey"),decimalSep:"undefined"==typeof l.decimalSep?",":l.decimalSep,addByteOrderMarker:"undefined"==typeof l.addBom,charset:"undefined"==typeof l.charset?"utf-8":l.charset};a.stringify(b,m).then(function(e){var t;if(window.navigator.msSaveOrOpenBlob)t=new Blob([e],{type:"text/csv;charset=utf-8;"}),navigator.msSaveBlob(t,"export.csv");else if("Microsoft Internet Explorer"===window.navigator.appName){window.alert("You're using an old version of Internet Explorer and the export might therefore have the wrong format, please update your browser.");var a=angular.element("<iframe></iframe>");a[0].style.display="none";var l=angular.element("body");l.append(a);var r=null;a[0].contentDocument?r=a[0].contentDocument:a[0].contentWindow&&(r=a[0].contentWindow.document),r.open("text/plain","replace"),r.write([e]),r.close(),r.execCommand("SaveAs",!0,g+".csv")}else{t=new Blob([e],{type:"text/csv;charset=utf-8;"});var s=angular.element("<a></a>");s.attr("href",window.URL.createObjectURL(t)),s.attr("download",g+".csv"),i.find("body").append(s),n(function(){s[0].click(),s.remove()},null)}})}}]).directive("gtEvent",function(){return{restrict:"A",link:function(e,t,n,a){e.$last&&e.$emit("gt-finished-rendering",e.gtId)}}}).filter("getProperty",["$filter",function(e){return function(t,n,a){try{var i=e("filter")(t,{objectKey:n},!0)[0][a]}catch(l){console.log('cannot read property: "'+a+'" on missing key: "'+n+'" in settings.',l)}return i}}]).filter("gtRender",["$filter",function(e){return function(t,n,a){var i;if(angular.isArray(t)){var l=e("filter")(t,{objectKey:a},!0)[0].render;i=l&&angular.isFunction(l)?l(n,a):n[a]}else i=n[a];return i}}]).filter("camelToDash",function(){return function(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}}).filter("gtSort",function(){return function(e,t){function n(e){var t=1;return"-"===e[0]&&(t=-1,e=e.substr(1)),function(n,a){var i=n[e]<a[e]?-1:n[e]>a[e]?1:0;return i*t}}function a(e){var t=e;return function(e,a){for(var i=0,l=0,g=t.length;0===l&&g>i;)l=n(t[i])(e,a),i++;return l}}return e.sort(a(t))}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyaWMudGFibGUudHBsLmpzIiwiZ2VuZXJpYy10YWJsZS5qcyJdLCJuYW1lcyI6WyJlIiwiYW5ndWxhciIsIm1vZHVsZSIsInQiLCJydW4iLCJwdXQiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInJlcGxhY2UiLCJzY29wZSIsImd0SWQiLCJndENsYXNzZXMiLCJndFNldHRpbmdzIiwiZ3RGaWVsZHMiLCJndFRvdGFscyIsImd0RGF0YSIsImd0Um93cyIsImd0Um93VHJhbnNpdGlvbiIsImd0UGFnaW5hdGlvbiIsImd0Tm9EYXRhVHh0IiwidGVtcGxhdGVVcmwiLCJsaW5rIiwiZWxlbWVudCIsImF0dHJzIiwiZm4iLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJGZpbHRlciIsIiR0aW1lb3V0IiwiQ1NWIiwiJGRvY3VtZW50Iiwib3JpZ2luYWxEYXRhIiwibWFwcGVkRGF0YSIsInNvcnRlZERhdGEiLCJzb3J0aW5nIiwic29ydCIsImV4cGVjdGVkIiwiYWN0dWFsIiwiaW5kZXhPZiIsIm9iamVjdEtleSIsIiRpZCIsInNldHRpbmciLCJmaWVsZCIsImNvbHVtbk9yZGVyIiwiZXhwb3J0RmllbGQiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJpbml0VGFibGUiLCJpbml0RGF0YSIsImd0SGFzRGF0YSIsInNsaWNlIiwiJGVtaXQiLCJhcHBseUZpbHRlciIsImNoYW5nZURhdGEiLCJuZXdEYXRhIiwiZGF0YSIsImZpbHRlcmVkRGF0YSIsIm1hcEtleXMiLCJsZW5ndGgiLCJwcm9wZXJ0aWVzIiwiZW5hYmxlZCIsInJvdyIsIm9iaiIsInByb3BlcnR5IiwidmFsdWVGdW5jdGlvbiIsImlzRnVuY3Rpb24iLCJhcHBseVNvcnQiLCIkYnJvYWRjYXN0IiwiYXBwbHlQYWdpbmF0aW9uIiwicGFnZXMiLCJwYXJzZUludCIsImN1cnJlbnRQYWdlIiwibG9hZGluZyIsImd0RGlzcGxheURhdGEiLCJwYWdpbmF0aW9uIiwiJG9uIiwiZXZlbnQiLCJhcmciLCJmaWVsZHMiLCJzZXR0aW5ncyIsImZvcmNlU29ydGluZyIsInNvcnRQcm9wZXJ0eSIsImd0RXhwb3J0IiwidG90YWxQYWdlcyIsIm5leHRQYWdlIiwicHJldmlvdXNQYWdlIiwic2V0UGFnZSIsInBhZ2UiLCJpIiwib3B0aW9ucyIsImZpbGVOYW1lIiwiZXhwb3J0RGF0YSIsIkpTT04iLCJwYXJzZSIsInRvSnNvbiIsImtleSIsImhhc093blByb3BlcnR5IiwiZmllbGRTZXR0aW5nIiwidGFibGVTZXR0aW5nIiwiZXhwb3J0TWV0aG9kIiwiZXhwb3J0RmllbGRzIiwiaGVhZGVycyIsImZpZWxkU2VwIiwiaGVhZGVyIiwidHh0RGVsaW0iLCJkZWNpbWFsU2VwIiwiYWRkQnl0ZU9yZGVyTWFya2VyIiwiYWRkQm9tIiwiY2hhcnNldCIsInN0cmluZ2lmeSIsInRoZW4iLCJyZXN1bHQiLCJibG9iIiwid2luZG93IiwibmF2aWdhdG9yIiwibXNTYXZlT3JPcGVuQmxvYiIsIkJsb2IiLCJ0eXBlIiwibXNTYXZlQmxvYiIsImFwcE5hbWUiLCJhbGVydCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZCIsImRvYyIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnRXaW5kb3ciLCJkb2N1bWVudCIsIm9wZW4iLCJ3cml0ZSIsImNsb3NlIiwiZXhlY0NvbW1hbmQiLCJkb3dubG9hZExpbmsiLCJhdHRyIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZmluZCIsImNsaWNrIiwicmVtb3ZlIiwiJGxhc3QiLCJmaWx0ZXIiLCJvdXRwdXQiLCJpc0FycmF5IiwicmVuZGVyTWV0aG9kIiwicmVuZGVyIiwic3RyaW5nIiwidG9Mb3dlckNhc2UiLCJhcnJheSIsInByb3BlcnR5QXJyYXkiLCJkeW5hbWljU29ydCIsInNvcnRPcmRlciIsInN1YnN0ciIsImEiLCJiIiwiZHluYW1pY1NvcnRNdWx0aXBsZSIsInByb3BzIiwib2JqMSIsIm9iajIiLCJudW1iZXJPZlByb3BlcnRpZXMiXSwibWFwcGluZ3MiOiJDQUFBLFNB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bEcsT0FJQSxJQUFBcUQsR0FBQWdELEVBQUF2RSxHQUNBdUIsRUFBQXVDLEVBQUFNLEVBQUFwRSxJQUFBcUUsRUFBQUMsR0FDQXRFLEdBRUEsT0FBQXVCLElBR0EsTUFBQXFDLEdBQUFsSCxLQUFBeUgsRUFBQU4iLCJmaWxlIjoiZ2VuZXJpYy50YWJsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSl7dHJ5e2U9YW5ndWxhci5tb2R1bGUoXCJnZW5lcmljLnRhYmxlXCIpfWNhdGNoKHQpe2U9YW5ndWxhci5tb2R1bGUoXCJnZW5lcmljLnRhYmxlXCIsW10pfWUucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oZSl7ZS5wdXQoXCJkaXJlY3RpdmUvZ2VuZXJpYy10YWJsZS9nZW5lcmljLXRhYmxlLmh0bWxcIiwnPGRpdiBjbGFzcz1cImdlbmVyaWMtdGFibGVcIj48ZGl2IGNsYXNzPVwiZ3Qtd3JhcHBlclwiPjx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLWNvbmRlbnNlZCB0YWJsZS1ob3ZlciB0YWJsZS1zb3J0YWJsZVwiIG5nLWlmPVwiZ3RIYXNEYXRhXCI+PHRoZWFkPjx0ciBuZy1jbGFzcz1cIjo6Z3RSb3dUcmFuc2l0aW9uID8gXFwnZmFkZS1pbiBhbmltYXRlXFwnOlxcJ1xcJ1wiPjx0aCBuZy1yZXBlYXQ9XCJmaWVsZCBpbiA6Omd0RmllbGRzIHwgb3JkZXJCeTpcXCdjb2x1bW5PcmRlclxcJyB0cmFjayBieSBmaWVsZC5vYmplY3RLZXlcIiBuZy1zaG93PVwiOmd0UmVmcmVzaDpndFNldHRpbmdzIHwgZ2V0UHJvcGVydHk6ZmllbGQub2JqZWN0S2V5OlxcJ3Zpc2libGVcXCdcIiBuZy1jbGFzcz1cIjpndFJlZnJlc2g6W2ZpZWxkLmNsYXNzTmFtZXMsIChmaWVsZC5vYmplY3RLZXkgfCBjYW1lbFRvRGFzaCkgKyBcXCctY29sdW1uXFwnLCBcXCdzb3J0LVxcJysoZ3RTZXR0aW5ncyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCdzb3J0XFwnKV1cIj48c3BhbiBuZy1jbGljaz1cIjpndFJlZnJlc2g6KGd0U2V0dGluZ3MgfCBnZXRQcm9wZXJ0eTpmaWVsZC5vYmplY3RLZXk6XFwnc29ydFxcJykgPT09IFxcJ2VuYWJsZVxcJyA/IHNvcnQoZmllbGQub2JqZWN0S2V5KTooZ3RTZXR0aW5ncyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCdzb3J0XFwnKSA9PT0gXFwnYXNjXFwnID8gc29ydChmaWVsZC5vYmplY3RLZXkpOihndFNldHRpbmdzIHwgZ2V0UHJvcGVydHk6ZmllbGQub2JqZWN0S2V5OlxcJ3NvcnRcXCcpID09PSBcXCdkZXNjXFwnID8gc29ydChmaWVsZC5vYmplY3RLZXkpOlxcJ1xcJ1wiPnt7OjpmaWVsZC5uYW1lfX08L3NwYW4+PC90aD48L3RyPjx0ciBuZy1pZj1cImd0VG90YWxzXCIgbmctY2xhc3M9XCI6Omd0Um93VHJhbnNpdGlvbiA/IFxcJ2ZhZGUtaW4gYW5pbWF0ZVxcJzpcXCdcXCdcIj48dGQgbmctcmVwZWF0PVwiZmllbGQgaW4gOjpndEZpZWxkcyB8IG9yZGVyQnk6XFwnY29sdW1uT3JkZXJcXCcgdHJhY2sgYnkgZmllbGQub2JqZWN0S2V5XCIgY2xhc3M9XCJ0b3RhbC1jb2x1bW5cIiBuZy1zaG93PVwiOmd0UmVmcmVzaDpndFNldHRpbmdzIHwgZ2V0UHJvcGVydHk6ZmllbGQub2JqZWN0S2V5OlxcJ3Zpc2libGVcXCdcIiBuZy1jbGFzcz1cIjo6WyhndEZpZWxkcyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCdjbGFzc05hbWVzXFwnKSwgKGZpZWxkLm9iamVjdEtleSB8IGNhbWVsVG9EYXNoKSArIFxcJy1jb2x1bW5cXCddXCIgbmctYmluZC1odG1sPVwiOjpndEZpZWxkcyB8IGd0UmVuZGVyOmd0VG90YWxzOmZpZWxkLm9iamVjdEtleVwiPjwvdGQ+PC90cj48L3RoZWFkPjx0Ym9keT48dHIgbmctcmVwZWF0PVwicm93IGluIGd0RGlzcGxheURhdGEgfCBsaW1pdFRvOiBkaXNwbGF5Um93c1wiIGd0LWV2ZW50PVwiXCIgbmctY2xhc3M9XCI6Omd0Um93VHJhbnNpdGlvbiA/IFxcJ2ZhZGUtaW4gYW5pbWF0ZVxcJzpcXCdcXCdcIj48dGQgbmctcmVwZWF0PVwiZmllbGQgaW4gOjpndEZpZWxkcyB8IG9yZGVyQnk6XFwnY29sdW1uT3JkZXJcXCcgdHJhY2sgYnkgZmllbGQub2JqZWN0S2V5XCIgbmctc2hvdz1cIjpndFJlZnJlc2g6Z3RTZXR0aW5ncyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCd2aXNpYmxlXFwnXCIgbmctY2xhc3M9XCI6OlsoZ3RGaWVsZHMgfCBnZXRQcm9wZXJ0eTpmaWVsZC5vYmplY3RLZXk6XFwnY2xhc3NOYW1lc1xcJyksIChmaWVsZC5vYmplY3RLZXkgfCBjYW1lbFRvRGFzaCkgKyBcXCctY29sdW1uXFwnXVwiPjxzcGFuIG5nLWNsYXNzPVwiOjpmaWVsZC5jbGljayA/IFxcJ2d0LWNsaWNrLWVuYWJsZWRcXCc6XFwnXFwnXCIgbmctYmluZC1odG1sPVwiOjpndEZpZWxkcyB8IGd0UmVuZGVyOnJvdzpmaWVsZC5vYmplY3RLZXlcIiBuZy1jbGljaz1cIjo6IWZpZWxkLmNsaWNrIHx8IGZpZWxkLmNsaWNrKHJvdylcIj48L3NwYW4+PC90ZD48L3RyPjwvdGJvZHk+PHRyIG5nLWlmPVwicGFnaW5hdGlvbiA9PT0gZmFsc2VcIj48dGQgY2xhc3M9XCJndC1uby1kYXRhXCIgY29sc3Bhbj1cInt7Omd0UmVmcmVzaDooZ3RTZXR0aW5ncyB8IGZpbHRlcjp7XFwndmlzaWJsZVxcJzp0cnVlfTp0cnVlKS5sZW5ndGh9fVwiPnt7OjpndE5vRGF0YVR4dH19PC90ZD48L3RyPjwvdGFibGU+PC9kaXY+PGRpdiBjbGFzcz1cImd0LXBhZ2luYXRpb24gdGV4dC1jZW50ZXJcIiBuZy1pZj1cImd0UGFnaW5hdGlvbiA9PT0gdHJ1ZSAmJiBwYWdpbmF0aW9uICE9PSBmYWxzZVwiPjx1bCBjbGFzcz1cInBhZ2luYXRpb25cIj48bGkgbmctY2xhc3M9XCJ7ZGlzYWJsZWQ6IGN1cnJlbnRQYWdlID09PSAwfVwiIG5nLXNob3c9XCJjdXJyZW50UGFnZSAhPT0gMFwiPjxidXR0b24gY2xhc3M9XCJidG4tbGluayBsaW5rXCIgbmctY2xpY2s9XCJwcmV2aW91c1BhZ2UoKVwiIHRyYW5zbGF0ZT1cIkFMTC5HRU5FUkFMI1BBR0lOQVRJT05fUFJFVklPVVMjQlVUVE9OXCIgbmctZGlzYWJsZWQ9XCJjdXJyZW50UGFnZSA9PT0gMFwiPsKrIFByZXY8L2J1dHRvbj48L2xpPjxsaSBuZy1zaG93PVwiY3VycmVudFBhZ2UgPiAzXCI+PGJ1dHRvbiBjbGFzcz1cImJ0bi1saW5rIGxpbmtcIiBuZy1jbGljaz1cInNldFBhZ2UoMClcIj4xPC9idXR0b24+PHNtYWxsPuKApjwvc21hbGw+PC9saT48bGkgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmU7cGFkZGluZzogMCA1cHg7XCIgbmctcmVwZWF0PVwicGFnZSBpbiBwYWdpbmF0aW9uXCIgbmctY2xhc3M9XCJwYWdlID09PSBjdXJyZW50UGFnZSA/IFxcJ2FjdGl2ZVxcJzpcXCdcXCdcIj48YnV0dG9uIGNsYXNzPVwiYnRuLWxpbmsgbGlua1wiIG5nLWNsaWNrPVwic2V0UGFnZShwYWdlKVwiPnt7cGFnZSsxfX08L2J1dHRvbj48L2xpPjxsaSBuZy1zaG93PVwiY3VycmVudFBhZ2UgKzEgPCBwYWdlcy5sZW5ndGgtMSAmJiBwYWdlcy5sZW5ndGggPiA0XCI+PHNtYWxsIG5nLXNob3c9XCJjdXJyZW50UGFnZSArIDMgPCBwYWdlcy5sZW5ndGhcIj7igKY8L3NtYWxsPjxidXR0b24gY2xhc3M9XCJidG4tbGluayBsaW5rXCIgbmctY2xpY2s9XCJzZXRQYWdlKHBhZ2VzLmxlbmd0aC0xKVwiPnt7cGFnZXMubGVuZ3RofX08L2J1dHRvbj48L2xpPjxsaSBuZy1jbGFzcz1cIntkaXNhYmxlZDogY3VycmVudFBhZ2UgPT0gcGFnZXMubGVuZ3RofVwiIG5nLXNob3c9XCJjdXJyZW50UGFnZSsxICE9PSBwYWdlcy5sZW5ndGhcIj48YnV0dG9uIGNsYXNzPVwiYnRuLWxpbmsgbGlua1wiIG5nLWNsaWNrPVwibmV4dFBhZ2UoKVwiIHRyYW5zbGF0ZT1cIkFMTC5HRU5FUkFMI1BBR0lOQVRJT05fTkVYVCNCVVRUT05cIiBuZy1kaXNhYmxlZD1cImN1cnJlbnRQYWdlKzEgPT09IHBhZ2VzLmxlbmd0aFwiPk5leHQgwrs8L2J1dHRvbj48L2xpPjwvdWw+PC9kaXY+PC9kaXY+Jyl9XSl9KCk7IiwiIWZ1bmN0aW9uKGUpe3RyeXtlPWFuZ3VsYXIubW9kdWxlKFwiZ2VuZXJpYy50YWJsZVwiKX1jYXRjaCh0KXtlPWFuZ3VsYXIubW9kdWxlKFwiZ2VuZXJpYy50YWJsZVwiLFtdKX1lLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGUpe2UucHV0KFwiZGlyZWN0aXZlL2dlbmVyaWMtdGFibGUvZ2VuZXJpYy10YWJsZS5odG1sXCIsJzxkaXYgY2xhc3M9XCJnZW5lcmljLXRhYmxlXCI+PHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtc29ydGFibGVcIiBuZy1pZj1cImd0SGFzRGF0YVwiIG5nLWNsYXNzPVwiZ3RDbGFzc2VzXCI+PHRoZWFkPjx0ciBuZy1jbGFzcz1cIjo6Z3RSb3dUcmFuc2l0aW9uID8gXFwnZmFkZS1pbiBhbmltYXRlXFwnOlxcJ1xcJ1wiPjx0aCBuZy1yZXBlYXQ9XCJmaWVsZCBpbiA6Omd0RmllbGRzIHwgb3JkZXJCeTpcXCdjb2x1bW5PcmRlclxcJyB0cmFjayBieSBmaWVsZC5vYmplY3RLZXlcIiBuZy1zaG93PVwiOmd0UmVmcmVzaDpndFNldHRpbmdzIHwgZ2V0UHJvcGVydHk6ZmllbGQub2JqZWN0S2V5OlxcJ3Zpc2libGVcXCdcIiBuZy1jbGFzcz1cIjpndFJlZnJlc2g6W2ZpZWxkLmNsYXNzTmFtZXMsIChmaWVsZC5vYmplY3RLZXkgfCBjYW1lbFRvRGFzaCkgKyBcXCctY29sdW1uXFwnLCBcXCdzb3J0LVxcJysoZ3RTZXR0aW5ncyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCdzb3J0XFwnKV1cIj48c3BhbiBuZy1jbGljaz1cIjpndFJlZnJlc2g6KGd0U2V0dGluZ3MgfCBnZXRQcm9wZXJ0eTpmaWVsZC5vYmplY3RLZXk6XFwnc29ydFxcJykgPT09IFxcJ2VuYWJsZVxcJyA/IHNvcnQoZmllbGQub2JqZWN0S2V5KTooZ3RTZXR0aW5ncyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCdzb3J0XFwnKSA9PT0gXFwnYXNjXFwnID8gc29ydChmaWVsZC5vYmplY3RLZXkpOihndFNldHRpbmdzIHwgZ2V0UHJvcGVydHk6ZmllbGQub2JqZWN0S2V5OlxcJ3NvcnRcXCcpID09PSBcXCdkZXNjXFwnID8gc29ydChmaWVsZC5vYmplY3RLZXkpOlxcJ1xcJ1wiPnt7OjpmaWVsZC5uYW1lfX08L3NwYW4+PC90aD48L3RyPjx0ciBuZy1pZj1cImd0VG90YWxzXCIgbmctY2xhc3M9XCI6Omd0Um93VHJhbnNpdGlvbiA/IFxcJ2ZhZGUtaW4gYW5pbWF0ZVxcJzpcXCdcXCdcIj48dGQgbmctcmVwZWF0PVwiZmllbGQgaW4gOjpndEZpZWxkcyB8IG9yZGVyQnk6XFwnY29sdW1uT3JkZXJcXCcgdHJhY2sgYnkgZmllbGQub2JqZWN0S2V5XCIgY2xhc3M9XCJ0b3RhbC1jb2x1bW5cIiBuZy1zaG93PVwiOmd0UmVmcmVzaDpndFNldHRpbmdzIHwgZ2V0UHJvcGVydHk6ZmllbGQub2JqZWN0S2V5OlxcJ3Zpc2libGVcXCdcIiBuZy1jbGFzcz1cIjo6WyhndEZpZWxkcyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCdjbGFzc05hbWVzXFwnKSwgKGZpZWxkLm9iamVjdEtleSB8IGNhbWVsVG9EYXNoKSArIFxcJy1jb2x1bW5cXCddXCIgbmctYmluZC1odG1sPVwiOjpndEZpZWxkcyB8IGd0UmVuZGVyOmd0VG90YWxzOmZpZWxkLm9iamVjdEtleVwiPjwvdGQ+PC90cj48L3RoZWFkPjx0Ym9keT48dHIgbmctcmVwZWF0PVwicm93IGluIGd0RGlzcGxheURhdGEgfCBsaW1pdFRvOiBkaXNwbGF5Um93c1wiIGd0LWV2ZW50PVwiXCIgbmctY2xhc3M9XCI6Omd0Um93VHJhbnNpdGlvbiA/IFxcJ2ZhZGUtaW4gYW5pbWF0ZVxcJzpcXCdcXCdcIj48dGQgbmctcmVwZWF0PVwiZmllbGQgaW4gOjpndEZpZWxkcyB8IG9yZGVyQnk6XFwnY29sdW1uT3JkZXJcXCcgdHJhY2sgYnkgZmllbGQub2JqZWN0S2V5XCIgbmctc2hvdz1cIjpndFJlZnJlc2g6Z3RTZXR0aW5ncyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCd2aXNpYmxlXFwnXCIgbmctY2xhc3M9XCI6OlsoZ3RGaWVsZHMgfCBnZXRQcm9wZXJ0eTpmaWVsZC5vYmplY3RLZXk6XFwnY2xhc3NOYW1lc1xcJyksIChmaWVsZC5vYmplY3RLZXkgfCBjYW1lbFRvRGFzaCkgKyBcXCctY29sdW1uXFwnXVwiPjxzcGFuIG5nLWNsYXNzPVwiOjpmaWVsZC5jbGljayA/IFxcJ2d0LWNsaWNrLWVuYWJsZWRcXCc6XFwnXFwnXCIgbmctYmluZC1odG1sPVwiOjpndEZpZWxkcyB8IGd0UmVuZGVyOnJvdzpmaWVsZC5vYmplY3RLZXlcIiBuZy1jbGljaz1cIjo6IWZpZWxkLmNsaWNrIHx8IGZpZWxkLmNsaWNrKHJvdylcIj48L3NwYW4+PC90ZD48L3RyPjwvdGJvZHk+PHRyIG5nLWlmPVwicGFnaW5hdGlvbiA9PT0gZmFsc2VcIj48dGQgY2xhc3M9XCJndC1uby1kYXRhXCIgY29sc3Bhbj1cInt7Omd0UmVmcmVzaDooZ3RTZXR0aW5ncyB8IGZpbHRlcjp7XFwndmlzaWJsZVxcJzp0cnVlfTp0cnVlKS5sZW5ndGh9fVwiPnt7OjpndE5vRGF0YVR4dH19PC90ZD48L3RyPjwvdGFibGU+PGRpdiBjbGFzcz1cImd0LXBhZ2luYXRpb24gdGV4dC1jZW50ZXJcIiBuZy1pZj1cImd0UGFnaW5hdGlvbiA9PT0gdHJ1ZSAmJiBwYWdpbmF0aW9uICE9PSBmYWxzZVwiPjx1bCBjbGFzcz1cInBhZ2luYXRpb25cIj48bGkgbmctY2xhc3M9XCJ7ZGlzYWJsZWQ6IGN1cnJlbnRQYWdlID09PSAwfVwiIG5nLXNob3c9XCJjdXJyZW50UGFnZSAhPT0gMFwiPjxidXR0b24gY2xhc3M9XCJidG4tbGluayBsaW5rXCIgbmctY2xpY2s9XCJwcmV2aW91c1BhZ2UoKVwiIHRyYW5zbGF0ZT1cIkFMTC5HRU5FUkFMI1BBR0lOQVRJT05fUFJFVklPVVMjQlVUVE9OXCIgbmctZGlzYWJsZWQ9XCJjdXJyZW50UGFnZSA9PT0gMFwiPsKrIFByZXY8L2J1dHRvbj48L2xpPjxsaSBuZy1zaG93PVwiY3VycmVudFBhZ2UgPiAzXCI+PGJ1dHRvbiBjbGFzcz1cImJ0bi1saW5rIGxpbmtcIiBuZy1jbGljaz1cInNldFBhZ2UoMClcIj4xPC9idXR0b24+PHNtYWxsPuKApjwvc21hbGw+PC9saT48bGkgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmU7cGFkZGluZzogMCA1cHg7XCIgbmctcmVwZWF0PVwicGFnZSBpbiBwYWdpbmF0aW9uXCIgbmctY2xhc3M9XCJwYWdlID09PSBjdXJyZW50UGFnZSA/IFxcJ2FjdGl2ZVxcJzpcXCdcXCdcIj48YnV0dG9uIGNsYXNzPVwiYnRuLWxpbmsgbGlua1wiIG5nLWNsaWNrPVwic2V0UGFnZShwYWdlKVwiPnt7cGFnZSsxfX08L2J1dHRvbj48L2xpPjxsaSBuZy1zaG93PVwiY3VycmVudFBhZ2UgKzEgPCBwYWdlcy5sZW5ndGgtMSAmJiBwYWdlcy5sZW5ndGggPiA0XCI+PHNtYWxsIG5nLXNob3c9XCJjdXJyZW50UGFnZSArIDMgPCBwYWdlcy5sZW5ndGhcIj7igKY8L3NtYWxsPjxidXR0b24gY2xhc3M9XCJidG4tbGluayBsaW5rXCIgbmctY2xpY2s9XCJzZXRQYWdlKHBhZ2VzLmxlbmd0aC0xKVwiPnt7cGFnZXMubGVuZ3RofX08L2J1dHRvbj48L2xpPjxsaSBuZy1jbGFzcz1cIntkaXNhYmxlZDogY3VycmVudFBhZ2UgPT0gcGFnZXMubGVuZ3RofVwiIG5nLXNob3c9XCJjdXJyZW50UGFnZSsxICE9PSBwYWdlcy5sZW5ndGhcIj48YnV0dG9uIGNsYXNzPVwiYnRuLWxpbmsgbGlua1wiIG5nLWNsaWNrPVwibmV4dFBhZ2UoKVwiIHRyYW5zbGF0ZT1cIkFMTC5HRU5FUkFMI1BBR0lOQVRJT05fTkVYVCNCVVRUT05cIiBuZy1kaXNhYmxlZD1cImN1cnJlbnRQYWdlKzEgPT09IHBhZ2VzLmxlbmd0aFwiPk5leHQgwrs8L2J1dHRvbj48L2xpPjwvdWw+PC9kaXY+PC9kaXY+Jyl9XSl9KCk7XHJcbiFmdW5jdGlvbihlKXt0cnl7ZT1hbmd1bGFyLm1vZHVsZShcImdlbmVyaWMudGFibGVcIil9Y2F0Y2godCl7ZT1hbmd1bGFyLm1vZHVsZShcImdlbmVyaWMudGFibGVcIixbXSl9ZS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihlKXtlLnB1dChcImRpcmVjdGl2ZS9nZW5lcmljLXRhYmxlL2dlbmVyaWMtdGFibGUuaHRtbFwiLCc8ZGl2IGNsYXNzPVwiZ2VuZXJpYy10YWJsZVwiPjx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLXNvcnRhYmxlXCIgbmctaWY9XCJndEhhc0RhdGFcIiBuZy1jbGFzcz1cImd0Q2xhc3Nlc1wiPjx0aGVhZD48dHIgbmctY2xhc3M9XCI6Omd0Um93VHJhbnNpdGlvbiA/IFxcJ2ZhZGUtaW4gYW5pbWF0ZVxcJzpcXCdcXCdcIj48dGggbmctcmVwZWF0PVwiZmllbGQgaW4gOjpndEZpZWxkcyB8IG9yZGVyQnk6XFwnY29sdW1uT3JkZXJcXCcgdHJhY2sgYnkgZmllbGQub2JqZWN0S2V5XCIgbmctc2hvdz1cIjpndFJlZnJlc2g6Z3RTZXR0aW5ncyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCd2aXNpYmxlXFwnXCIgbmctY2xhc3M9XCI6Z3RSZWZyZXNoOltmaWVsZC5jbGFzc05hbWVzLCAoZmllbGQub2JqZWN0S2V5IHwgY2FtZWxUb0Rhc2gpICsgXFwnLWNvbHVtblxcJywgXFwnc29ydC1cXCcrKGd0U2V0dGluZ3MgfCBnZXRQcm9wZXJ0eTpmaWVsZC5vYmplY3RLZXk6XFwnc29ydFxcJyldXCI+PHNwYW4gbmctY2xpY2s9XCI6Z3RSZWZyZXNoOihndFNldHRpbmdzIHwgZ2V0UHJvcGVydHk6ZmllbGQub2JqZWN0S2V5OlxcJ3NvcnRcXCcpID09PSBcXCdlbmFibGVcXCcgPyBzb3J0KGZpZWxkLm9iamVjdEtleSk6KGd0U2V0dGluZ3MgfCBnZXRQcm9wZXJ0eTpmaWVsZC5vYmplY3RLZXk6XFwnc29ydFxcJykgPT09IFxcJ2FzY1xcJyA/IHNvcnQoZmllbGQub2JqZWN0S2V5KTooZ3RTZXR0aW5ncyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCdzb3J0XFwnKSA9PT0gXFwnZGVzY1xcJyA/IHNvcnQoZmllbGQub2JqZWN0S2V5KTpcXCdcXCdcIj57ezo6ZmllbGQubmFtZX19PC9zcGFuPjwvdGg+PC90cj48dHIgbmctaWY9XCJndFRvdGFsc1wiIG5nLWNsYXNzPVwiOjpndFJvd1RyYW5zaXRpb24gPyBcXCdmYWRlLWluIGFuaW1hdGVcXCc6XFwnXFwnXCI+PHRkIG5nLXJlcGVhdD1cImZpZWxkIGluIDo6Z3RGaWVsZHMgfCBvcmRlckJ5OlxcJ2NvbHVtbk9yZGVyXFwnIHRyYWNrIGJ5IGZpZWxkLm9iamVjdEtleVwiIGNsYXNzPVwidG90YWwtY29sdW1uXCIgbmctc2hvdz1cIjpndFJlZnJlc2g6Z3RTZXR0aW5ncyB8IGdldFByb3BlcnR5OmZpZWxkLm9iamVjdEtleTpcXCd2aXNpYmxlXFwnXCIgbmctY2xhc3M9XCI6OlsoZ3RGaWVsZHMgfCBnZXRQcm9wZXJ0eTpmaWVsZC5vYmplY3RLZXk6XFwnY2xhc3NOYW1lc1xcJyksIChmaWVsZC5vYmplY3RLZXkgfCBjYW1lbFRvRGFzaCkgKyBcXCctY29sdW1uXFwnXVwiIG5nLWJpbmQtaHRtbD1cIjo6Z3RGaWVsZHMgfCBndFJlbmRlcjpndFRvdGFsczpmaWVsZC5vYmplY3RLZXlcIj48L3RkPjwvdHI+PC90aGVhZD48dGJvZHk+PHRyIG5nLXJlcGVhdD1cInJvdyBpbiBndERpc3BsYXlEYXRhIHwgbGltaXRUbzogZGlzcGxheVJvd3NcIiBndC1ldmVudD1cIlwiIG5nLWNsYXNzPVwiOjpndFJvd1RyYW5zaXRpb24gPyBcXCdmYWRlLWluIGFuaW1hdGVcXCc6XFwnXFwnXCI+PHRkIG5nLXJlcGVhdD1cImZpZWxkIGluIDo6Z3RGaWVsZHMgfCBvcmRlckJ5OlxcJ2NvbHVtbk9yZGVyXFwnIHRyYWNrIGJ5IGZpZWxkLm9iamVjdEtleVwiIG5nLXNob3c9XCI6Z3RSZWZyZXNoOmd0U2V0dGluZ3MgfCBnZXRQcm9wZXJ0eTpmaWVsZC5vYmplY3RLZXk6XFwndmlzaWJsZVxcJ1wiIG5nLWNsYXNzPVwiOjpbKGd0RmllbGRzIHwgZ2V0UHJvcGVydHk6ZmllbGQub2JqZWN0S2V5OlxcJ2NsYXNzTmFtZXNcXCcpLCAoZmllbGQub2JqZWN0S2V5IHwgY2FtZWxUb0Rhc2gpICsgXFwnLWNvbHVtblxcJ11cIj48c3BhbiBuZy1jbGFzcz1cIjo6ZmllbGQuY2xpY2sgPyBcXCdndC1jbGljay1lbmFibGVkXFwnOlxcJ1xcJ1wiIG5nLWJpbmQtaHRtbD1cIjo6Z3RGaWVsZHMgfCBndFJlbmRlcjpyb3c6ZmllbGQub2JqZWN0S2V5XCIgbmctY2xpY2s9XCI6OiFmaWVsZC5jbGljayB8fCBmaWVsZC5jbGljayhyb3cpXCI+PC9zcGFuPjwvdGQ+PC90cj48L3Rib2R5Pjx0ciBuZy1pZj1cInBhZ2luYXRpb24gPT09IGZhbHNlXCI+PHRkIGNsYXNzPVwiZ3Qtbm8tZGF0YVwiIGNvbHNwYW49XCJ7ezpndFJlZnJlc2g6KGd0U2V0dGluZ3MgfCBmaWx0ZXI6e1xcJ3Zpc2libGVcXCc6dHJ1ZX06dHJ1ZSkubGVuZ3RofX1cIj57ezo6Z3ROb0RhdGFUeHR9fTwvdGQ+PC90cj48L3RhYmxlPjxkaXYgY2xhc3M9XCJndC1wYWdpbmF0aW9uIHRleHQtY2VudGVyXCIgbmctaWY9XCJndFBhZ2luYXRpb24gPT09IHRydWUgJiYgcGFnaW5hdGlvbiAhPT0gZmFsc2VcIj48dWwgY2xhc3M9XCJwYWdpbmF0aW9uXCI+PGxpIG5nLWNsYXNzPVwie2Rpc2FibGVkOiBjdXJyZW50UGFnZSA9PT0gMH1cIiBuZy1zaG93PVwiY3VycmVudFBhZ2UgIT09IDBcIj48YnV0dG9uIGNsYXNzPVwiYnRuLWxpbmsgbGlua1wiIG5nLWNsaWNrPVwicHJldmlvdXNQYWdlKClcIiB0cmFuc2xhdGU9XCJBTEwuR0VORVJBTCNQQUdJTkFUSU9OX1BSRVZJT1VTI0JVVFRPTlwiIG5nLWRpc2FibGVkPVwiY3VycmVudFBhZ2UgPT09IDBcIj7CqyBQcmV2PC9idXR0b24+PC9saT48bGkgbmctc2hvdz1cImN1cnJlbnRQYWdlID4gM1wiPjxidXR0b24gY2xhc3M9XCJidG4tbGluayBsaW5rXCIgbmctY2xpY2s9XCJzZXRQYWdlKDApXCI+MTwvYnV0dG9uPjxzbWFsbD7igKY8L3NtYWxsPjwvbGk+PGxpIHN0eWxlPVwiZGlzcGxheTogaW5saW5lO3BhZGRpbmc6IDAgNXB4O1wiIG5nLXJlcGVhdD1cInBhZ2UgaW4gcGFnaW5hdGlvblwiIG5nLWNsYXNzPVwicGFnZSA9PT0gY3VycmVudFBhZ2UgPyBcXCdhY3RpdmVcXCc6XFwnXFwnXCI+PGJ1dHRvbiBjbGFzcz1cImJ0bi1saW5rIGxpbmtcIiBuZy1jbGljaz1cInNldFBhZ2UocGFnZSlcIj57e3BhZ2UrMX19PC9idXR0b24+PC9saT48bGkgbmctc2hvdz1cImN1cnJlbnRQYWdlICsxIDwgcGFnZXMubGVuZ3RoLTEgJiYgcGFnZXMubGVuZ3RoID4gNFwiPjxzbWFsbCBuZy1zaG93PVwiY3VycmVudFBhZ2UgKyAzIDwgcGFnZXMubGVuZ3RoXCI+4oCmPC9zbWFsbD48YnV0dG9uIGNsYXNzPVwiYnRuLWxpbmsgbGlua1wiIG5nLWNsaWNrPVwic2V0UGFnZShwYWdlcy5sZW5ndGgtMSlcIj57e3BhZ2VzLmxlbmd0aH19PC9idXR0b24+PC9saT48bGkgbmctY2xhc3M9XCJ7ZGlzYWJsZWQ6IGN1cnJlbnRQYWdlID09IHBhZ2VzLmxlbmd0aH1cIiBuZy1zaG93PVwiY3VycmVudFBhZ2UrMSAhPT0gcGFnZXMubGVuZ3RoXCI+PGJ1dHRvbiBjbGFzcz1cImJ0bi1saW5rIGxpbmtcIiBuZy1jbGljaz1cIm5leHRQYWdlKClcIiB0cmFuc2xhdGU9XCJBTEwuR0VORVJBTCNQQUdJTkFUSU9OX05FWFQjQlVUVE9OXCIgbmctZGlzYWJsZWQ9XCJjdXJyZW50UGFnZSsxID09PSBwYWdlcy5sZW5ndGhcIj5OZXh0IMK7PC9idXR0b24+PC9saT48L3VsPjwvZGl2PjwvZGl2PicpfV0pfSgpO1xyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBnZW5lcmljLnRhYmxlLmRpcmVjdGl2ZTpnZW5lcmljVGFibGVcclxuICogQHJlcXVpcmVzIC8vICdwcm92aWRlIGFueSBkZXBlbmRlbmNpZXMgZXguICRzY29wZSwgeW91IGNhbiBoYXZlIG11bHRpcGxlIEByZXF1aXJlcyBsaW5lcydcclxuICpcclxuICogQHJlc3RyaWN0IEVcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIERlc2NyaXB0aW9uIG9mIGdlbmVyaWNUYWJsZSBkaXJlY3RpdmUsIGxvcmVtIGlwc3VtIGRvbGFyIHNpdCBhbWV0XHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gZGF0YS1hdHRyaWJ1dGUgLy8gJ2F0dHJpYnV0ZXMgdXNlZCBieSBkaXJlY3RpdmUsIHlvdSBjYW4gaGF2ZSBtdWx0aXBsZSBAcGFyYW0gbGluZXMnXHJcbiAqXHJcbiAqICBAZXhhbXBsZSA8cHJlPlxyXG4gKlxyXG4gKiA8Z2VuZXJpYy10YWJsZSBkYXRhLWF0dHJpYnV0ZT1cIm15LXZhbHVlXCI+PC9nZW5lcmljLXRhYmxlPlxyXG4gKlxyXG4gKiA8L3ByZT5cclxuICovXHJcbmFuZ3VsYXIubW9kdWxlKCdnZW5lcmljLnRhYmxlJykuZGlyZWN0aXZlKCdnZW5lcmljVGFibGUnLCBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgICAgIGd0SWQ6Jz1ndElkJyxcclxuICAgICAgICAgICAgZ3RDbGFzc2VzOidAZ3RDbGFzc2VzJyxcclxuICAgICAgICAgICAgZ3RTZXR0aW5nczonPWd0U2V0dGluZ3MnLFxyXG4gICAgICAgICAgICBndEZpZWxkczonPWd0RmllbGRzJyxcclxuICAgICAgICAgICAgZ3RUb3RhbHM6Jz1ndFRvdGFscycsXHJcbiAgICAgICAgICAgIC8vZ3RJbmRleDonPWd0SW5kZXgnLFxyXG4gICAgICAgICAgICBndERhdGE6Jz1ndERhdGEnLFxyXG4gICAgICAgICAgICBndFJvd3M6J0BndFJvd3MnLFxyXG4gICAgICAgICAgICBndFJvd1RyYW5zaXRpb246J0BndFJvd1RyYW5zaXRpb24nLFxyXG4gICAgICAgICAgICBndFBhZ2luYXRpb246J0BndFBhZ2luYXRpb24nLFxyXG4gICAgICAgICAgICBndE5vRGF0YVR4dDonQCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnZGlyZWN0aXZlL2dlbmVyaWMtdGFibGUvZ2VuZXJpYy10YWJsZS5odG1sJyxcclxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGZuKSB7XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjpcImdlbmVyaWNUYWJsZUNvbnRyb2xsZXJcIlxyXG4gICAgfTtcclxufSkuY29udHJvbGxlcignZ2VuZXJpY1RhYmxlQ29udHJvbGxlcicsZnVuY3Rpb24oJHNjb3BlLCRmaWx0ZXIsJHRpbWVvdXQsIENTViwkZG9jdW1lbnQpe1xyXG4gICAgdmFyIG9yaWdpbmFsRGF0YTsgLy8gb3JpZ2luYWwgdW50b3VjaGVkIGRhdGFcclxuICAgIHZhciBtYXBwZWREYXRhOyAvLyBtYXBwZWQgZGF0YSwgYXJyYXkgY29udGFpbmluZyBtYXBwZWQga2V5cyB1c2VkIGJ5IHRhYmxlXHJcbiAgICB2YXIgc29ydGVkRGF0YTsgLy8gc29ydGVkIG1hcHBlZCBkYXRhXHJcbiAgICB2YXIgc29ydGluZyA9IHR5cGVvZiAkc2NvcGUuZ3RTZXR0aW5ncyA9PT0gJ3VuZGVmaW5lZCcgPyBmYWxzZTokZmlsdGVyKCdtYXAnKSgkZmlsdGVyKCdmaWx0ZXInKSgkc2NvcGUuZ3RTZXR0aW5ncyx7c29ydDpcImFzYyBkZXNjXCJ9LGZ1bmN0aW9uKGV4cGVjdGVkLCBhY3R1YWwpe1xyXG4gICAgICAgIHJldHVybiBhY3R1YWwuaW5kZXhPZihleHBlY3RlZCkgPiAtMTtcclxuICAgIH0pLGZ1bmN0aW9uKHNvcnQpe1xyXG4gICAgICAgIHJldHVybiAoc29ydC5zb3J0ID09PSAnZGVzYycgPyAnLSc6JycpICsgc29ydC5vYmplY3RLZXlcclxuICAgIH0pOyAvLyByZXR1cm5zIGFycmF5IGNvbnRhaW5pbmcgc29ydGluZyBjcml0ZXJpYVxyXG4gICAgJHNjb3BlLmd0UGFnaW5hdGlvbiA9IHR5cGVvZiAkc2NvcGUuZ3RQYWdpbmF0aW9uID09PSAndW5kZWZpbmVkJyA/IHRydWU6JHNjb3BlLmd0UGFnaW5hdGlvbiAhPT0gJ2ZhbHNlJztcclxuICAgICRzY29wZS5ndFJvd3MgPSB0eXBlb2YgJHNjb3BlLmd0Um93cyA9PT0gJ3VuZGVmaW5lZCcgPyAyMDokc2NvcGUuZ3RSb3dzO1xyXG4gICAgJHNjb3BlLmd0Tm9EYXRhVHh0ID0gdHlwZW9mICRzY29wZS5ndE5vRGF0YVR4dCA9PT0gJ3VuZGVmaW5lZCcgPyAnTm8gdGFibGUgZGF0YSB0byBkaXNwbGF5Jzokc2NvcGUuZ3ROb0RhdGFUeHQ7XHJcbiAgICAkc2NvcGUuZ3RJZCA9IHR5cGVvZiAkc2NvcGUuZ3RJZCA9PT0gJ3VuZGVmaW5lZCcgPyAkc2NvcGUuJGlkOiRzY29wZS5ndElkO1xyXG4gICAgLyokc2NvcGUudGFibGUgPSB7XHJcbiAgICAgaW5kZXg6JHNjb3BlLmd0SW5kZXgsXHJcbiAgICAgc2V0dGluZ3M6ICRzY29wZS5ndFNldHRpbmdzLFxyXG4gICAgIHRvdGFsczogJHNjb3BlLmd0VG90YWxzLFxyXG4gICAgIGZpZWxkczokc2NvcGUuZ3RGaWVsZHNcclxuICAgICB9OyovXHJcblxyXG4gICAgLy8gb3JkZXIgY29sdW1uc1xyXG4gICAgJGZpbHRlcignbWFwJykoJHNjb3BlLmd0U2V0dGluZ3MsZnVuY3Rpb24oc2V0dGluZyl7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICB2YXIgZmllbGQgPSAkZmlsdGVyKCdmaWx0ZXInKSgkc2NvcGUuZ3RGaWVsZHMse29iamVjdEtleTpzZXR0aW5nLm9iamVjdEtleX0sdHJ1ZSlbMF07XHJcbiAgICAgICAgICAgIGZpZWxkLmNvbHVtbk9yZGVyID0gc2V0dGluZy5jb2x1bW5PcmRlcjtcclxuICAgICAgICAgICAgaWYoc2V0dGluZy5leHBvcnQgPT09IGZhbHNlKXtcclxuICAgICAgICAgICAgICAgIGZpZWxkLmV4cG9ydEZpZWxkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmaWVsZCBkZWZpbml0aW9uIG9iamVjdCBmb3IgcHJvcGVydHk6IFwiJysgc2V0dGluZy5vYmplY3RLZXkgKydcIiBub3QgZm91bmQuJyxlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBpbml0VGFibGUgPSBmdW5jdGlvbihpbml0RGF0YSl7XHJcbiAgICAgICAgJHNjb3BlLmd0SGFzRGF0YSA9IGZhbHNlO1xyXG4gICAgICAgIG9yaWdpbmFsRGF0YSA9IGluaXREYXRhLnNsaWNlKDApO1xyXG4gICAgICAgICRzY29wZS4kZW1pdCgnZ3Qtc3RhcnRlZC1kYXRhLXByb2Nlc3NpbmcnLCRzY29wZS5ndElkKTtcclxuICAgICAgICBhcHBseUZpbHRlcihpbml0RGF0YSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGNoYW5nZSBkYXRhLCB0aGlzIHdlIHVwZGF0ZSBvciBkYXRhIHNldFxyXG4gICAgdmFyIGNoYW5nZURhdGEgPSBmdW5jdGlvbihuZXdEYXRhKXtcclxuICAgICAgICAkc2NvcGUuZ3RIYXNEYXRhID0gZmFsc2U7XHJcbiAgICAgICAgb3JpZ2luYWxEYXRhID0gbmV3RGF0YS5zbGljZSgwKTtcclxuICAgICAgICAkc2NvcGUuJGVtaXQoJ2d0LXN0YXJ0ZWQtZGF0YS1wcm9jZXNzaW5nJywkc2NvcGUuZ3RJZCk7XHJcbiAgICAgICAgYXBwbHlGaWx0ZXIobmV3RGF0YSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGludGVybmFsIGZpbHRlciwgdGhpcyBpcyB3aGVyZSB3ZSBhcHBseSBmaWx0ZXJzXHJcbiAgICB2YXIgYXBwbHlGaWx0ZXIgPSBmdW5jdGlvbiAoZGF0YSl7XHJcbiAgICAgICAgdmFyIGZpbHRlcmVkRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgbWFwS2V5cyhmaWx0ZXJlZERhdGEpO1xyXG4gICAgICAgIGZpbHRlcmVkRGF0YS5sZW5ndGggPSAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBtYXBwaW5nLCB0aGlzIGlzIHdoZXJlIHdlIG1hcCB3aGljaCBrZXlzIHNob3VsZCBiZSBwYXJ0IG9mIHRoZSB0YWJsZSBhcnJheSByb3cgb2JqZWN0XHJcbiAgICB2YXIgbWFwS2V5cyA9IGZ1bmN0aW9uIChkYXRhKXtcclxuXHJcbiAgICAgICAgLy8gZ2V0IGtleSBuYW1lcyBmcm9tIHNldHRpbmdzXHJcbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSAkZmlsdGVyKCdtYXAnKSgkZmlsdGVyKCdmaWx0ZXInKSgkc2NvcGUuZ3RTZXR0aW5ncywge2VuYWJsZWQ6dHJ1ZX0sdHJ1ZSksJ29iamVjdEtleScpO1xyXG5cclxuICAgICAgICAvLyBjcmVhdGUgbmV3IGFycmF5IHdpdGggbWFwcGVkIGRhdGFcclxuICAgICAgICBtYXBwZWREYXRhID0gJGZpbHRlcignbWFwJykoZGF0YSwgZnVuY3Rpb24ocm93KXtcclxuICAgICAgICAgICAgdmFyIG9iaiA9IHt9OyAvLyBjcmVhdGUgbmV3IHJvdyBvYmplY3RcclxuXHJcbiAgICAgICAgICAgIC8vIHJldHJpZXZlIG9iamVjdCB2YWx1ZXMgZnJvbSByb3cgYW5kIGFkZCB0aGVtIHRvIHRoZSBjb3JyZXNwb25kaW5nIGtleSBkZWZpbmVkIGJ5IHRoZSB0YWJsZSBmaWVsZHNcclxuICAgICAgICAgICAgJGZpbHRlcignbWFwJykocHJvcGVydGllcyxmdW5jdGlvbihwcm9wZXJ0eSl7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBwcm9wZXJ0eSBleGlzdHMgaW4gZGF0YSBvYmplY3QuLi5cclxuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiByb3dbcHJvcGVydHldICE9PSAndW5kZWZpbmVkJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGNvbHVtbiB2YWx1ZSBmcm9tIGRhdGEgcHJvcGVydHlcclxuICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcGVydHldPXJvd1twcm9wZXJ0eV1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncHJvcGVydHk6IFwiJyArIHByb3BlcnR5ICArICdcIiBkb2VzIG5vdCBleGlzdCBpbiBkYXRhIG9iamVjdCwgYXR0ZW1wdGluZyB0byB1c2UgdmFsdWUgZnVuY3Rpb24gaW5zdGVhZCAnKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwcm9wZXJ0eSBkb2VzIG5vdCBleGlzdHMgaW4gZGF0YSwgdXNlIHZhbHVlIGZ1bmN0aW9uIHRvIGdldCB2YWx1ZSBmb3IgY29sdW1uXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlRnVuY3Rpb24gPSAkZmlsdGVyKCdtYXAnKSgkZmlsdGVyKCdmaWx0ZXInKSgkc2NvcGUuZ3RGaWVsZHMsIHtvYmplY3RLZXk6cHJvcGVydHl9LHRydWUpLCd2YWx1ZScpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlRnVuY3Rpb24gJiYgYW5ndWxhci5pc0Z1bmN0aW9uKHZhbHVlRnVuY3Rpb24pKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlIGN1c3RvbSB2YWx1ZSBmdW5jdGlvbiB0byByZXRyaWV2ZSB2YWx1ZSBmb3IgY29sdW1uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3VzaW5nIHZhbHVlIGZ1bmN0aW9uIHRvIGdldCBkYXRhIGZvciByb3cgY29sdW1uICcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcGVydHldID0gdmFsdWVGdW5jdGlvbihyb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwcm9wZXJ0eTogXCInICsgcHJvcGVydHkgICsgJ1wiIGRvZXMgbm90IGV4aXN0cyBpbiBkYXRhIG9iamVjdCBhbmQgbm8gdmFsdWUgZnVuY3Rpb24gd2FzIGRlY2xhcmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBhcHBseSBzb3J0IHRvIG91ciBtYXBwZWQgYXJyYXlcclxuICAgICAgICBhcHBseVNvcnQoKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gc29ydCwgdGhpcyBpcyB3aGVyZSB3ZSBzb3J0IHRoZSBmaWx0ZXJlZCByZXN1bHRzXHJcbiAgICB2YXIgYXBwbHlTb3J0ID0gZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgc29ydGVkRGF0YSA9IHNvcnRpbmcgIT09IGZhbHNlID8gJGZpbHRlcignZ3RTb3J0JykobWFwcGVkRGF0YSwgc29ydGluZyk6IG1hcHBlZERhdGE7XHJcbiAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJyQkcmViaW5kOjpndFJlZnJlc2gnKTtcclxuICAgICAgICBhcHBseVBhZ2luYXRpb24oKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gcGFnaW5hdGlvbiwgdGhpcyBpcyB3aGVyZSB3ZSBkZWNpZGUgd2hpY2ggc3Vic2V0IG9mIHRoZSBkYXRhIHRvIHNob3dcclxuICAgIHZhciBhcHBseVBhZ2luYXRpb24gPSBmdW5jdGlvbiAoKXtcclxuICAgICAgICAkc2NvcGUucGFnZXMgPSAkZmlsdGVyKCdjaHVua0J5Jykoc29ydGVkRGF0YSwgcGFyc2VJbnQoJHNjb3BlLmd0Um93cykpO1xyXG4gICAgICAgICRzY29wZS5jdXJyZW50UGFnZSA9IDA7XHJcbiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS4kZW1pdCgnZ3Qtc3RhcnRlZC1yZW5kZXJpbmcnKTtcclxuICAgICAgICAkc2NvcGUuZ3REaXNwbGF5RGF0YSA9ICRzY29wZS5wYWdlc1skc2NvcGUuY3VycmVudFBhZ2VdO1xyXG4gICAgICAgIHBhZ2luYXRpb24oJHNjb3BlLnBhZ2VzLmxlbmd0aCwkc2NvcGUuY3VycmVudFBhZ2UpO1xyXG5cclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2d0LWZpbmlzaGVkLWRhdGEtcHJvY2Vzc2luZycsJHNjb3BlLmd0SWQpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZ3RIYXNEYXRhID0gdHJ1ZTtcclxuICAgICAgICB9LDIwMCk7XHJcbiAgICAgICAgLy8kc2NvcGUuJGVtaXQoJ2d0LWZpbmlzaGVkLXJlbmRlcmluZycpO1xyXG4gICAgICAgIC8qaWYoJHNjb3BlLmxvYWRpbmcpe1xyXG4gICAgICAgICBjb25zb2xlLmxvZygnc3RpbGwgbG9vYWRpbmcnKTtcclxuICAgICAgICAgJHNjb3BlLiRlbWl0KCdndC1maW5pc2hlZC1yZW5kZXJpbmcnKTtcclxuICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgfSovXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGxpc3RlbiBmb3IgdXBkYXRlIHRhYmxlIGV2ZW50c1xyXG4gICAgJHNjb3BlLiRvbignZ3QtdXBkYXRlLXRhYmxlOicrJHNjb3BlLmd0SWQsZnVuY3Rpb24oZXZlbnQsYXJnKXtcclxuICAgICAgICBjaGFuZ2VEYXRhKGFyZyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBsaXN0ZW4gZm9yIHVwZGF0ZSB0YWJsZSBldmVudHNcclxuICAgICRzY29wZS4kb24oJ2d0LXVwZGF0ZS1zdHJ1Y3R1cmU6Jyskc2NvcGUuZ3RJZCxmdW5jdGlvbihldmVudCxhcmcpe1xyXG4gICAgICAgICRzY29wZS5ndEZpZWxkcyA9IGFyZy5maWVsZHM7XHJcbiAgICAgICAgJHNjb3BlLmd0U2V0dGluZ3MgPSBhcmcuc2V0dGluZ3M7XHJcblxyXG4gICAgICAgIC8vIGlmIG5vIHNvcnRpbmcgaXMgYXBwbGllZCBvciBpZiBzb3J0aW5nIGlzIGZvcmNlZC4uLlxyXG4gICAgICAgIGlmKHNvcnRpbmcgPT09IGZhbHNlIHx8IGFyZy5mb3JjZVNvcnRpbmcgPT09IHRydWUpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIC4uLnNldCBzb3J0aW5nIG9yZGVyXHJcbiAgICAgICAgICAgIHNvcnRpbmcgPSAkZmlsdGVyKCdtYXAnKSgkZmlsdGVyKCdmaWx0ZXInKSgkc2NvcGUuZ3RTZXR0aW5ncyx7c29ydDpcImFzYyBkZXNjXCJ9LGZ1bmN0aW9uKGV4cGVjdGVkLCBhY3R1YWwpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbC5pbmRleE9mKGV4cGVjdGVkKSA+IC0xO1xyXG4gICAgICAgICAgICB9KSxmdW5jdGlvbihzb3J0KXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoc29ydC5zb3J0ID09PSAnZGVzYycgPyAnLSc6JycpICsgc29ydC5vYmplY3RLZXlcclxuICAgICAgICAgICAgfSk7IC8vIHJldHVybnMgYXJyYXkgY29udGFpbmluZyBzb3J0aW5nIGNyaXRlcmlhXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcmVzZXQgc29ydGluZyBzZXR0aW5nICdhc2MnIGFuZCAnZGVzYycgdG8gJ2VuYWJsZSdcclxuICAgICAgICAgICAgJGZpbHRlcignbWFwJykoJGZpbHRlcignZmlsdGVyJykoJHNjb3BlLmd0U2V0dGluZ3Mse3NvcnQ6XCJhc2MgZGVzY1wifSxmdW5jdGlvbihleHBlY3RlZCwgYWN0dWFsKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhY3R1YWwuaW5kZXhPZihleHBlY3RlZCkgPiAtMTtcclxuICAgICAgICAgICAgfSksZnVuY3Rpb24oc2V0dGluZyl7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nLnNvcnQgPSAnZW5hYmxlJztcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyB1cGRhdGUgc2V0dGluZ3MgdG8gbWF0Y2ggc29ydGluZyBpbiB0YWJsZVxyXG4gICAgICAgICAgICAkZmlsdGVyKCdtYXAnKShzb3J0aW5nLGZ1bmN0aW9uKHNvcnRQcm9wZXJ0eSl7XHJcbiAgICAgICAgICAgICAgICB2YXIgc29ydCA9IHNvcnRQcm9wZXJ0eS5pbmRleE9mKCctJykgPT09IC0xID8gJ2FzYyc6J2Rlc2MnO1xyXG4gICAgICAgICAgICAgICAgc29ydFByb3BlcnR5ID0gc29ydFByb3BlcnR5LnJlcGxhY2UoJy0nLCcnKTtcclxuICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKCRzY29wZS5ndFNldHRpbmdzLCB7J29iamVjdEtleSc6c29ydFByb3BlcnR5fSx0cnVlKVswXS5zb3J0ID0gc29ydDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAvLyBsaXN0ZW4gZm9yIHBhZ2luYXRpb24gbGVuZ3RoIGNoYW5nZVxyXG4gICAgJHNjb3BlLiRvbignZ3QtcGFnaW5hdGUtdGFibGU6Jyskc2NvcGUuZ3RJZCxmdW5jdGlvbihldmVudCxhcmcpe1xyXG4gICAgICAgICRzY29wZS5ndFJvd3MgPSBwYXJzZUludChhcmcpO1xyXG4gICAgICAgIGFwcGx5UGFnaW5hdGlvbigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gbGlzdGVuIGZvciBleHBvcnQgZXZlbnRcclxuICAgICRzY29wZS4kb24oJ2d0LWV4cG9ydC1jc3Y6Jyskc2NvcGUuZ3RJZCxmdW5jdGlvbihldmVudCxhcmcpe1xyXG4gICAgICAgIGd0RXhwb3J0KGFyZyk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLy8gY3JlYXRlIHBhZ2luYXRpb25cclxuICAgIHZhciBwYWdpbmF0aW9uID0gZnVuY3Rpb24odG90YWxQYWdlcywgY3VycmVudFBhZ2Upe1xyXG4gICAgICAgICRzY29wZS5wYWdpbmF0aW9uID0gW107XHJcblxyXG4gICAgICAgIC8vIGlmIHRvdGFsIHBhZ2VzIGVxdWFscyAwIGllLiBubyBkYXRhIGF2YWlsYWJsZVxyXG4gICAgICAgIGlmKHRvdGFsUGFnZXMgPT09IDAgKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5wYWdpbmF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmIGxlc3MgdGhhbiB0d28gcGFnZXNcclxuICAgICAgICBpZih0b3RhbFBhZ2VzIDwgMil7XHJcbiAgICAgICAgICAgICRzY29wZS5wYWdpbmF0aW9uID0gWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiBsZXNzIHRoYW4gdGhyZWUgcGFnZXNcclxuICAgICAgICBlbHNlIGlmKHRvdGFsUGFnZXMgPCAzKXtcclxuICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb24gPSBbMCwxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgbGVzcyB0aGFuIGZvdXIgcGFnZXNcclxuICAgICAgICBlbHNlIGlmKHRvdGFsUGFnZXMgPCA0KXtcclxuICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb24gPSBbMCwxLDJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiBsZXNzIHRoYW4gZml2ZSBwYWdlc1xyXG4gICAgICAgIGVsc2UgaWYodG90YWxQYWdlcyA8IDUpe1xyXG4gICAgICAgICAgICAkc2NvcGUucGFnaW5hdGlvbiA9IFswLDEsMiwzXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgY3VycmVudCBwYWdlIGlzIG9uZSBvZiB0aGUgZm91ciBmaXJzdCBwYWdlc1xyXG4gICAgICAgIGVsc2UgaWYoY3VycmVudFBhZ2UgPCA0KXtcclxuICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb24gPSBbMCwxLDIsMyw0XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgbmV4dCB0byBsYXN0IHBhZ2VcclxuICAgICAgICBlbHNlIGlmKHRvdGFsUGFnZXMgPiBjdXJyZW50UGFnZSsxKXtcclxuICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb24gPSBbY3VycmVudFBhZ2UtMSxjdXJyZW50UGFnZSxjdXJyZW50UGFnZSsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgbGFzdCBwYWdlXHJcbiAgICAgICAgZWxzZSBpZih0b3RhbFBhZ2VzID09PSBjdXJyZW50UGFnZSsxKXtcclxuICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb24gPSBbY3VycmVudFBhZ2UtMixjdXJyZW50UGFnZS0xLGN1cnJlbnRQYWdlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgY3VycmVudCBwYWdlIGlzIG5vdCBvbmUgb2YgdGhlIGZvdXIgZmlyc3QgcGFnZXNcclxuICAgICAgICBlbHNlIGlmKHRvdGFsUGFnZXMtNCA+IGN1cnJlbnRQYWdlKXtcclxuICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb24gPSBbY3VycmVudFBhZ2UtMSxjdXJyZW50UGFnZSxjdXJyZW50UGFnZSsxLCBjdXJyZW50UGFnZSsyXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5uZXh0UGFnZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRQYWdlICsrO1xyXG4gICAgICAgICAgICBwYWdpbmF0aW9uKCRzY29wZS5wYWdlcy5sZW5ndGgsJHNjb3BlLmN1cnJlbnRQYWdlKTtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdndC1zdGFydGVkLXJlbmRlcmluZycsJHNjb3BlLmd0SWQpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZ3REaXNwbGF5RGF0YSA9ICRzY29wZS5wYWdlc1skc2NvcGUuY3VycmVudFBhZ2VdO1xyXG4gICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5wcmV2aW91c1BhZ2UgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICRzY29wZS5jdXJyZW50UGFnZSAtLTtcclxuICAgICAgICBwYWdpbmF0aW9uKCRzY29wZS5wYWdlcy5sZW5ndGgsJHNjb3BlLmN1cnJlbnRQYWdlKTtcclxuICAgICAgICAkc2NvcGUuJGVtaXQoJ2d0LXN0YXJ0ZWQtcmVuZGVyaW5nJywkc2NvcGUuZ3RJZCk7XHJcbiAgICAgICAgJHNjb3BlLmd0RGlzcGxheURhdGEgPSAkc2NvcGUucGFnZXNbJHNjb3BlLmN1cnJlbnRQYWdlXTtcclxuICAgIH07XHJcbiAgICAkc2NvcGUuc2V0UGFnZSA9IGZ1bmN0aW9uKHBhZ2Upe1xyXG4gICAgICAgICRzY29wZS5jdXJyZW50UGFnZSA9IHBhZ2U7XHJcbiAgICAgICAgcGFnaW5hdGlvbigkc2NvcGUucGFnZXMubGVuZ3RoLCRzY29wZS5jdXJyZW50UGFnZSk7XHJcbiAgICAgICAgJHNjb3BlLiRlbWl0KCdndC1zdGFydGVkLXJlbmRlcmluZycsJHNjb3BlLmd0SWQpO1xyXG4gICAgICAgICRzY29wZS5ndERpc3BsYXlEYXRhID0gJHNjb3BlLnBhZ2VzWyRzY29wZS5jdXJyZW50UGFnZV07XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHNvcnQgZnVuY3Rpb25cclxuICAgICRzY29wZS5zb3J0ID0gZnVuY3Rpb24ocHJvcGVydHkpe1xyXG4gICAgICAgIGlmIChwcm9wZXJ0eSl7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyAkc2NvcGUuZ3RTZXR0aW5ncy5sZW5ndGggPiBpOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgdmFyIHNldHRpbmcgPSAkc2NvcGUuZ3RTZXR0aW5nc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmKHNldHRpbmcub2JqZWN0S2V5ID09PSBwcm9wZXJ0eSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnQgPSBzZXR0aW5nLnNvcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzb3J0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGlzYWJsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkbyBub3RoaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW5hYmxlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ndFNldHRpbmdzW2ldLnNvcnQgPSAnYXNjJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhc2MnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmd0U2V0dGluZ3NbaV0uc29ydCA9ICdkZXNjJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkZXNjJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ndFNldHRpbmdzW2ldLnNvcnQgPSAnZW5hYmxlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNvcnRpbmcgPSAkZmlsdGVyKCdtYXAnKSgkZmlsdGVyKCdmaWx0ZXInKSgkc2NvcGUuZ3RTZXR0aW5ncyx7c29ydDpcImFzYyBkZXNjXCJ9LGZ1bmN0aW9uKGV4cGVjdGVkLCBhY3R1YWwpe1xyXG4gICAgICAgICAgICByZXR1cm4gYWN0dWFsLmluZGV4T2YoZXhwZWN0ZWQpID4gLTE7XHJcbiAgICAgICAgfSksZnVuY3Rpb24oc29ydCl7XHJcbiAgICAgICAgICAgIHJldHVybiAoc29ydC5zb3J0ID09PSAnZGVzYycgPyAnLSc6JycpICsgc29ydC5vYmplY3RLZXlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYXBwbHlTb3J0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGlmIHRhYmxlIGhhcyBkYXRhIHVwb24gaW5pdGlhbGl6YXRpb24uLi5cclxuICAgIGlmKCRzY29wZS5ndERhdGEpe1xyXG4gICAgICAgIGluaXRUYWJsZSgkc2NvcGUuZ3REYXRhKTsgLy8gaW5pdGlhbGl6ZSB0YWJsZSB3aXRoIGRhdGEgcGFzc2VkIHRvIGRpcmVjdGl2ZVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGV4cG9ydCBmdW5jdGlvblxyXG4gICAgdmFyIGd0RXhwb3J0ID0gZnVuY3Rpb24ob3B0aW9ucyl7XHJcbiAgICAgICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSAndW5kZWZpbmVkJz8ge306b3B0aW9ucztcclxuXHJcbiAgICAgICAgdmFyIGZpbGVOYW1lID0gdHlwZW9mIG9wdGlvbnMuZmlsZU5hbWUgPT09ICd1bmRlZmluZWQnID8gJ2V4cG9ydCc6b3B0aW9ucy5maWxlTmFtZTtcclxuXHJcbiAgICAgICAgLy8gZml4IGV4cG9ydCBkYXRhXHJcbiAgICAgICAgdmFyIGV4cG9ydERhdGEgPSBKU09OLnBhcnNlKGFuZ3VsYXIudG9Kc29uKHNvcnRlZERhdGEuc2xpY2UoMCkpKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cG9ydERhdGEubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICB2YXIgcm93ID0gZXhwb3J0RGF0YVtpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHJvdykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJvdy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkU2V0dGluZyA9ICRmaWx0ZXIoJ2ZpbHRlcicpKCRzY29wZS5ndEZpZWxkcyx7b2JqZWN0S2V5OmtleX0sdHJ1ZSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlU2V0dGluZyA9ICRmaWx0ZXIoJ2ZpbHRlcicpKCRzY29wZS5ndFNldHRpbmdzLHtvYmplY3RLZXk6a2V5fSx0cnVlKVswXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cG9ydE1ldGhvZCA9IGZpZWxkU2V0dGluZy5leHBvcnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGV4cG9ydCBtZXRob2QgaXMgZGVjbGFyZWQgYW5kIGlzIGEgZnVuY3Rpb24uLi5cclxuICAgICAgICAgICAgICAgICAgICBpZihleHBvcnRNZXRob2QgJiYgYW5ndWxhci5pc0Z1bmN0aW9uKGV4cG9ydE1ldGhvZCkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAuLi5yZXBsYWNlIGV4cG9ydCBkYXRhIHJvdyB2YWx1ZSB3aXRoIHZhbHVlIHJldHVybmVkIGJ5IGZ1bmN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1trZXldID0gZXhwb3J0TWV0aG9kKHJvdywga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgZXhwb3J0IGlzIHNldCB0byBmYWxzZSBmb3IgZmllbGQuLi5cclxuICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgdGFibGVTZXR0aW5nLmV4cG9ydCAhPT0gJ3VuZGVmaW5lZCcgJiYgdGFibGVTZXR0aW5nLmV4cG9ydCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi4uc2V0IHZhbHVlIHRvIG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93W2tleV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZGVjbGFyZSBleHBvcnQgZGF0YVxyXG4gICAgICAgIHZhciBkYXRhID0gZXhwb3J0RGF0YTsvL0pTT04ucGFyc2UoYW5ndWxhci50b0pzb24oc29ydGVkRGF0YS5zbGljZSgwKSkpO1xyXG5cclxuICAgICAgICB2YXIgZXhwb3J0RmllbGRzID0gJGZpbHRlcignb3JkZXJCeScpKCRmaWx0ZXIoJ3JlbW92ZVdpdGgnKSgkc2NvcGUuZ3RGaWVsZHMse2V4cG9ydEZpZWxkOmZhbHNlfSksXCJjb2x1bW5PcmRlclwiKTtcclxuICAgICAgICB2YXIgaGVhZGVycyA9IHtcclxuICAgICAgICAgICAgZmllbGRTZXA6IHR5cGVvZiBvcHRpb25zLmZpZWxkU2VwID09PSAndW5kZWZpbmVkJyA/IFwiO1wiOm9wdGlvbnMuZmllbGRTZXAsXHJcbiAgICAgICAgICAgIGhlYWRlcjogJGZpbHRlcignbWFwJykoZXhwb3J0RmllbGRzLFwibmFtZVwiKSwgLy8gZ2V0IGhlYWRlcnMgYnkgY29sdW1uIG9yZGVyXHJcbiAgICAgICAgICAgIHR4dERlbGltOiB0eXBlb2Ygb3B0aW9ucy50eHREZWxpbSA9PT0gJ3VuZGVmaW5lZCcgPyAnXCInOm9wdGlvbnMudHh0RGVsaW0sXHJcbiAgICAgICAgICAgIGNvbHVtbk9yZGVyOiRmaWx0ZXIoJ21hcCcpKGV4cG9ydEZpZWxkcyxcIm9iamVjdEtleVwiKSwgLy8gZ2V0IGNvbHVtbiBvcmRlclxyXG4gICAgICAgICAgICBkZWNpbWFsU2VwOnR5cGVvZiBvcHRpb25zLmRlY2ltYWxTZXAgPT09ICd1bmRlZmluZWQnID8gJywnOm9wdGlvbnMuZGVjaW1hbFNlcCxcclxuICAgICAgICAgICAgYWRkQnl0ZU9yZGVyTWFya2VyOnR5cGVvZiBvcHRpb25zLmFkZEJvbSA9PT0gJ3VuZGVmaW5lZCcsXHJcbiAgICAgICAgICAgIGNoYXJzZXQ6dHlwZW9mIG9wdGlvbnMuY2hhcnNldCA9PT0gJ3VuZGVmaW5lZCcgPyAndXRmLTgnOm9wdGlvbnMuY2hhcnNldFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgQ1NWLnN0cmluZ2lmeShkYXRhLCBoZWFkZXJzKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XHJcblxyXG4gICAgICAgICAgICB2YXIgYmxvYjtcclxuXHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IpIHtcclxuICAgICAgICAgICAgICAgIGJsb2IgPSBuZXcgQmxvYihbcmVzdWx0XSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dC9jc3Y7Y2hhcnNldD11dGYtODtcIlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3IubXNTYXZlQmxvYihibG9iLCAnZXhwb3J0LmNzdicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBub3QgYSBmdWxseSB3b3JraW5nIHNvbHV0aW9uLCBzb21lIHRhZ3MgKHRleCA8Qk9EWT4pIHNob3cgdXAgaW4gZXhjZWwgdG9nZXRoZXIgd2l0aCB0aGUgY29ycmVjdCBkYXRhLlxyXG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhZGRlZCBhbiBhbGVydCBtZXNzYWdlIHRvIHVyZ2UgdXNlcnMgdG8gdXNlIGFub3RoZXIgYnJvd3NlciBvciB1cGRhdGUgdGhlaXIgYnJvd3NlciBmb3IgYSBiZXR0ZXIgbG9va2luZyBleHBvcnQuXHJcbiAgICAgICAgICAgICAgICBpZiAod2luZG93Lm5hdmlnYXRvci5hcHBOYW1lID09PSAnTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hbGVydChcIllvdSdyZSB1c2luZyBhbiBvbGQgdmVyc2lvbiBvZiBJbnRlcm5ldCBFeHBsb3JlciBhbmQgdGhlIGV4cG9ydCBtaWdodCB0aGVyZWZvcmUgaGF2ZSB0aGUgd3JvbmcgZm9ybWF0LCBwbGVhc2UgdXBkYXRlIHlvdXIgYnJvd3Nlci5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlmcmFtZSA9IGFuZ3VsYXIuZWxlbWVudCgnPGlmcmFtZT48L2lmcmFtZT4nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZnJhbWVbMF0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCdib2R5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hcHBlbmQoaWZyYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaWZyYW1lWzBdLmNvbnRlbnREb2N1bWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSBpZnJhbWVbMF0uY29udGVudERvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmIChpZnJhbWVbMF0uY29udGVudFdpbmRvdyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IGlmcmFtZVswXS5jb250ZW50V2luZG93LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkb2Mub3BlbihcInRleHQvcGxhaW5cIiwgXCJyZXBsYWNlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvYy53cml0ZShbcmVzdWx0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZnJhbWUuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBkb2MuZXhlY0NvbW1hbmQoJ1NhdmVBcycsIHRydWUsIGZpbGVOYW1lKycuY3N2Jyk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBibG9iID0gbmV3IEJsb2IoW3Jlc3VsdF0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04O1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvd25sb2FkTGluayA9IGFuZ3VsYXIuZWxlbWVudCgnPGE+PC9hPicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvd25sb2FkTGluay5hdHRyKCdocmVmJywgd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvd25sb2FkTGluay5hdHRyKCdkb3dubG9hZCcsZmlsZU5hbWUrJy5jc3YnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXBwZW5kIGRvd25sb2FkIGxpbmsgdG8gYm9keSBhbmQgY2xpY2sgaXQsIG9uY2UgY2xpY2tlZCByZW1vdmUgaXRcclxuICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLmFwcGVuZChkb3dubG9hZExpbmspO1xyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZExpbmtbMF0uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRMaW5rLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfTtcclxuXHJcbn0pLmRpcmVjdGl2ZSgnZ3RFdmVudCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgZm4pIHtcclxuICAgICAgICAgICAgaWYgKHNjb3BlLiRsYXN0KXtcclxuICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCdndC1maW5pc2hlZC1yZW5kZXJpbmcnLHNjb3BlLmd0SWQpO1xyXG4gICAgICAgICAgICAgICAgLy9zY29wZS4kcGFyZW50LiRwYXJlbnQubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSkuZmlsdGVyKCdnZXRQcm9wZXJ0eScsZnVuY3Rpb24oJGZpbHRlcil7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oc2V0dGluZ3MsIGtleSxwcm9wZXJ0eSl7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhrZXkpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAkZmlsdGVyKCdmaWx0ZXInKShzZXR0aW5ncyx7b2JqZWN0S2V5OmtleX0sdHJ1ZSlbMF1bcHJvcGVydHldO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYW5ub3QgcmVhZCBwcm9wZXJ0eTogXCInICsgcHJvcGVydHkgKyAnXCIgb24gbWlzc2luZyBrZXk6IFwiJyArIGtleSArICdcIiBpbiBzZXR0aW5ncy4nLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9XHJcbn0pLmZpbHRlcignZ3RSZW5kZXInLGZ1bmN0aW9uKCRmaWx0ZXIpe1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNldHRpbmdzLCByb3csIGtleSl7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygncmVuZGVyJyk7XHJcbiAgICAgICAgdmFyIG91dHB1dDtcclxuICAgICAgICAvL3ZhciBvdXRwdXQgPSBhbmd1bGFyLmlzQXJyYXkoc2V0dGluZ3MpID8gJGZpbHRlcignZmlsdGVyJykoc2V0dGluZ3Mse29iamVjdEtleTprZXl9LHRydWUpWzBdW2tleV06IHJvd1trZXldO1xyXG4gICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoc2V0dGluZ3MpKSB7XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJNZXRob2QgPSAkZmlsdGVyKCdmaWx0ZXInKShzZXR0aW5ncyx7b2JqZWN0S2V5OmtleX0sdHJ1ZSlbMF0ucmVuZGVyO1xyXG4gICAgICAgICAgICBpZihyZW5kZXJNZXRob2QgJiYgYW5ndWxhci5pc0Z1bmN0aW9uKHJlbmRlck1ldGhvZCkpe1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gcmVuZGVyTWV0aG9kKHJvdywga2V5KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG91dHB1dCA9IHJvd1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3V0cHV0ID0gcm93W2tleV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgfVxyXG59KS5maWx0ZXIoJ2NhbWVsVG9EYXNoJyxmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZyl7XHJcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKCAvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJyApLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcbn0pLmZpbHRlcignZ3RTb3J0JyxmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcm9wZXJ0eUFycmF5KXtcclxuICAgICAgICBmdW5jdGlvbiBkeW5hbWljU29ydChwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICB2YXIgc29ydE9yZGVyID0gMTtcclxuICAgICAgICAgICAgaWYocHJvcGVydHlbMF0gPT09IFwiLVwiKSB7XHJcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXIgPSAtMTtcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkuc3Vic3RyKDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSxiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gKGFbcHJvcGVydHldIDwgYltwcm9wZXJ0eV0pID8gLTEgOiAoYVtwcm9wZXJ0eV0gPiBiW3Byb3BlcnR5XSkgPyAxIDogMDtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKiBzb3J0T3JkZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZHluYW1pY1NvcnRNdWx0aXBsZShwcm9wZXJ0eUFycmF5KSB7XHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAqIHNhdmUgdGhlIGFyZ3VtZW50cyBvYmplY3QgYXMgaXQgd2lsbCBiZSBvdmVyd3JpdHRlblxyXG4gICAgICAgICAgICAgKiBub3RlIHRoYXQgYXJndW1lbnRzIG9iamVjdCBpcyBhbiBhcnJheS1saWtlIG9iamVjdFxyXG4gICAgICAgICAgICAgKiBjb25zaXN0aW5nIG9mIHRoZSBuYW1lcyBvZiB0aGUgcHJvcGVydGllcyB0byBzb3J0IGJ5XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB2YXIgcHJvcHMgPSBwcm9wZXJ0eUFycmF5OyAvL2FyZ3VtZW50cztcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvYmoxLCBvYmoyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDAsIHJlc3VsdCA9IDAsIG51bWJlck9mUHJvcGVydGllcyA9IHByb3BzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIC8qIHRyeSBnZXR0aW5nIGEgZGlmZmVyZW50IHJlc3VsdCBmcm9tIDAgKGVxdWFsKVxyXG4gICAgICAgICAgICAgICAgICogYXMgbG9uZyBhcyB3ZSBoYXZlIGV4dHJhIHByb3BlcnRpZXMgdG8gY29tcGFyZVxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB3aGlsZShyZXN1bHQgPT09IDAgJiYgaSA8IG51bWJlck9mUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGR5bmFtaWNTb3J0KHByb3BzW2ldKShvYmoxLCBvYmoyKTtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnJheS5zb3J0KGR5bmFtaWNTb3J0TXVsdGlwbGUocHJvcGVydHlBcnJheSkpO1xyXG4gICAgfVxyXG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
